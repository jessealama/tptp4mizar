stylesheet "1.0";

output method="xml" encoding="utf-8" indent="yes";
output omit-xml-declaration="no";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

#article = { ""; }

//////////////////////////////////////////////////////////////////////
// Utilities
//////////////////////////////////////////////////////////////////////

$lcletters = { "abcdefghijklmnopqrstuvwxyz"; }
$ucletters = { "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; }

tpl lc (#s) { `translate($s, $ucletters, $lcletters)`; }
tpl uc (#s) { `translate($s, $lcletters, $ucletters)`; }

tpl set {
  <Typ {
    @kind = "M";
    @nr = "1";
    <Cluster;
  }
}

tpl [/] {
  choose {
    when [$article = ""] {
      msg terminate="yes" "Error: a value for the article stylesheet parameter was not supplied (or the empty string was supplied).";
    }
    when [not(tstp)] {
      msg terminate="yes" "Error: this does not appear to be a TSTP XML document, because it lacks a 'tstp' root element.";
    }
    when [tstp[2]] {
      msg terminate="yes" "Error: this does not appear to be a TSTP XML document, because it has multiple 'tstp' root elements.";
    }
    otherwise {
      apply [tstp];
    }
  }
}

tpl [tstp] {
  $num-predicates = `count(descendant::predicate[@name and not(@name = "=") and not(@name = preceding::predicate[@name]/@name)])`;
  $num-functions = `count(descendant::function[@name and not(@name = preceding::function[@name]/@name)])`;
  $article-uc = uc (#s = `$article`);

  <Notations {
    <Signature {
      <ArticleID {
        @"name" = "HIDDEN";
      }
      <ArticleID {
        @"name" = `$article-uc`;
      }
    }
    <Vocabularies {

      // // import stuff from HIDDEN
      // <Vocabulary {
      //   <ArticleID {
      //     @"name" = "HIDDEN";
      //   }
      //   <SymbolCount { @kind="G"; @nr="0"; }
      //   <SymbolCount { @kind="K"; @nr="3"; }
      //   <SymbolCount { @kind="L"; @nr="3"; }
      //   <SymbolCount { @kind="M"; @nr="1"; }
      //   <SymbolCount { @kind="O"; @nr="0"; }
      //   <SymbolCount { @kind="R"; @nr="3"; }
      //   <SymbolCount { @kind="U"; @nr="0"; }
      //   <SymbolCount { @kind="V"; @nr="1"; }
      // }

      <Vocabulary {
        <ArticleID {
          @"name" = `$article-uc`;
        }
        <SymbolCount { @kind="G"; @nr="0"; }
        <SymbolCount { @kind="K"; @nr="0"; }
        <SymbolCount { @kind="L"; @nr="0"; }
        <SymbolCount { @kind="M"; @nr="0"; }
        <SymbolCount { @kind="O"; @nr=`$num-functions`; }
        <SymbolCount { @kind="R"; @nr=`$num-predicates`; }
        <SymbolCount { @kind="U"; @nr="0"; }
        <SymbolCount { @kind="V"; @nr="0"; }

      }
    }

    // predicates
    for-each [descendant::predicate[@name and not(@name = "=") and not(@name = preceding::predicate[@name]/@name)]] {
      <Pattern {
        @kind = "R";
        @nr = `position()`;
        @aid = `$article-uc`;
        @constrkind = "R";
        @constrnr = `2 + position()`;
        <Format {
          @kind = "R";
          @symbolnr = `position()`;
          @argnr = `count (*)`;
          @leftargnr = "0";
        }
        <ArgTypes {
          for-each [*] {
            set ();
          }
        }
        <Visible {
          for-each [*] {
            <Int {
              @x = `position()`;
            }
          }
        }
      }
    }

    // functions
    for-each [descendant::function[@name and not(@name = preceding::function[@name]/@name)]] {
      <Pattern {
        @kind = "K";
        @nr = `position()`;
        @aid = `$article-uc`;
        @constrkind = "K";
        @constrnr = `position()`;
        <Format {
          @kind = "O";
          @symbolnr = `position()`;
          @argnr = `count (*)`;
          @leftargnr = "0";
        }
        <ArgTypes {
          for-each [*] {
            set ();
          }
        }
        <Visible {
          for-each [*] {
            <Int {
              @x = `position()`;
            }
          }
        }
      }
    }

  }
}

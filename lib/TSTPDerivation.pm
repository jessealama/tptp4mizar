package TSTPDerivation;

require v5.10.0; # for the 'say' feature
use feature 'say';

use Moose;

extends 'TPTPProblem';

use Pod::Find qw(pod_where);
use Pod::Usage;
use Data::Dumper;
use Carp qw(croak carp confess);
use File::Temp qw(tempfile);
use Readonly;
use Regexp::DefaultFlags;
use charnames qw(:full);
use List::MoreUtils qw(none);

# Our stuff
use Utils qw(error_message
	     is_valid_xml_file);
use Strings qw($SP);

has 'background_theory' => (
    is => 'ro',
    reader => 'get_background_theory',
);

has 'raw_text' => (
    isa => 'Str',
    is => 'ro',
    reader => 'get_raw_text',
);

has 'path' => (
    isa => 'Str',
    is => 'ro',
    reader => 'get_path',
);

sub BUILD {
    my $self = shift;

    my $path = $self->get_path ();

    (my $tmp_xml_fh, my $tmp_xml_path) = tempfile ();

    my $tptp4X_xmlize_status
	= system ("tptp4X -N -V -c -x -fxml ${path} > ${tmp_xml_path} 2> /dev/null");
    my $tptp4X_xmlize_exit_code = $tptp4X_xmlize_status >> 8;
    if ($tptp4X_xmlize_exit_code != 0) {
	confess error_message ('tptp4X did not exit cleanly when XMLizing the TPTP file at', "\n", "\n", '  ', $path, "\n", "\n", 'Its exit code was ', $tptp4X_xmlize_exit_code, '.');
    }

    if (! is_valid_xml_file ($tmp_xml_path)) {
	print {*STDERR} error_message ('The file generated by tptp4X at', $SP, $tmp_xml_path, $SP, 'is an invalid XML file.');
	exit 1;
    }

    close $tmp_xml_fh
	or confess error_message ('Unable to close the temporary output filehandle.');

    return $self;

}

1;
__END__

=pod

=head1 NAME

Derivation

=head1 DESCRIPTION

This is the base class of all TSTP-style derivations.


=head1 DEPENDENCIES

=over 8

=item L<Moose|http://search.cpan.org/~doy/Moose-2.0403/lib/Moose.pm>

=back

=cut

stylesheet "1.0";
output method="xml" indent="yes";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

#article = { ""; }

//////////////////////////////////////////////////////////////////////
// Utilities
//////////////////////////////////////////////////////////////////////

$lcletters = { "abcdefghijklmnopqrstuvwxyz"; }
$ucletters = { "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; }

tpl lc (#s) { `translate($s, $ucletters, $lcletters)`; }
tpl uc (#s) { `translate($s, $lcletters, $ucletters)`; }

tpl capitalize-after-underscore (#string) {
  if [contains ($string, "_")] {
    $before = `substring-before ($string, "_")`;
    $after = `substring-after ($string, "_")`;
    if [$after = ""] {
      `$before`;
    } else {
      $after-length = `string-length ($after)`;
      $first-char-as-string = `substring ($after, 1, 1)`;
      $after-first-char = `substring ($after, 2, $after-length)`;
      $first-char-as-string-uc = uc (#s = $first-char-as-string);
      $transformed-tail = capitalize-after-underscore (#string = $after-first-char);
      `concat ($before, $first-char-as-string-uc, $transformed-tail)`;
    }
  } else {
    `$string`;
  }
}

tpl [*] mode="trace" {
  $n = `name (.)`;
  $position = `count (preceding-sibling::*[name() = $n]) + 1`;
  if [parent::*] {
    apply [..] mode="trace";
  }
  $step = `concat ($n, "[", $position, "]")`;
  msg $step;
}

//////////////////////////////////////////////////////////////////////
// Keys
//////////////////////////////////////////////////////////////////////

key "axiom" [formula[@status = "axiom"]] `@name`;

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

// If we don't handle something explicitly, we don't handle it at all.
tpl [*] {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node.")`;
  msg terminate="yes" $message;
}

tpl [*] mode="no-justification" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in no-justification mode.")`;
  msg terminate="yes" $message;
}

tpl [*] mode="strip-universal-prefix" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in strip-universal-prefix mode.")`;
  msg terminate="yes" $message;
}

tpl [*] mode="axiom" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in axiom mode.")`;
  msg terminate="yes" $message;
}

tpl [*] mode="lemma" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in lemma mode.")`;
  msg terminate="yes" $message;
}

tpl [*] mode="conjecture" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in conjecture mode.")`;
  msg terminate="yes" $message;
}

tpl [*] mode="full" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in full mode.")`;
  msg terminate="yes" $message;
}

tpl [/] {
  choose {
    when [$article = ""] {
      msg terminate="yes" "Error: the empty string is not an acceptable value for the article stylesheet parameter.";
    }
    when [string-length ($article) > 8] {
      msg terminate="yes" "Error: the value of the article stylesheet parameter is too long (it must be at most 8 characters).";
    }
    when [contains ($article, " ")] {
      msg terminate="yes" "Error: the value of the article stylesheet parameter contains whitespace.";
    }
    when [tstp] {
      apply [tstp];
    }
    otherwise {
      msg terminate="yes" "Error: the required tstp document element is missing.";
    }
  }
}

tpl [tstp] {
  choose {
    when [formula[@status = "conjecture"][2]] {
      msg terminate="yes" "Error: there are multiple conjecture formulas, but we expected to find exactly one.";
    }
    when [formula[@status = "conjecture"]] {
      $aid-uc = uc (#s = $article);
      <Text-Proper {
        @articleid = $aid-uc;
        if [descendant::variable] {
          <Item {
            @kind = "Reservation";
            <Variables {
              for-each [descendant::variable[@name and not(@name = preceding::variable[@name]/@name)]] {
                <Variable {
                  @spelling = `@name`;
                }
              }
            }
            <Standard-Type {
              @spelling = "set";
            }
          }
        }
        for-each [formula[@status = "axiom"]] {
          apply [.] mode="axiom";
        }
        for-each [formula[@status = "plain"]] {
          apply [.] mode="lemma";
        }
        for-each [formula[@status = "conjecture"]] {
          apply [.] mode="conjecture";
        }
      }
    }
    otherwise {
      msg terminate="yes" "Error: there is no conjecture formula.";
    }
  }
}

tpl [formula[@name]] mode="axiom" {
  // at the moment we cannot handle axioms in the usual sense, so we
  // will treat axioms as lemmas
  $n = `@name`;
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        for-each [key ("axiom", $n)] {
          for-each [source] {
            for-each [non-logical-data[@name = "file"]] {
              for-each [non-logical-data[position() = last()]] {
                $safe-name = capitalize-after-underscore (#string = `@name`);
                @spelling = $safe-name;
              }
            }
          }
        }
      }
      apply [*[1]] mode="strip-universal-prefix";
    }
    <Straightforward-Justification;
  }
}

tpl [formula[@name]] mode="lemma" {
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        $safe-name = capitalize-after-underscore (#string = `@name`);
        $step-name = `concat ("Step", $safe-name)`;
        @spelling = $step-name;
      }
      apply [*[1]] mode="strip-universal-prefix";
    }
    <Straightforward-Justification {
      for-each [source] {
        for-each [non-logical-data[@name = "inference"]] {
          for-each [non-logical-data[position() = last()]] {
            for-each [number[@name]] {
              $n = `@name`;
              <Local-Reference {
                if [key ("axiom", $n)] {
                  for-each [key ("axiom", $n)] {
                    for-each [source] {
                      for-each [non-logical-data[@name = "file"]] {
                        for-each [non-logical-data[position() = last()]] {
                          $safe-name = capitalize-after-underscore (#string = `@name`);
                          @spelling = $safe-name;
                        }
                      }
                    }
                  }
                } else {
                  $safe-name = capitalize-after-underscore (#string = `@name`);
                  $step-name = `concat ("Step", $safe-name)`;
                  @spelling = $step-name;
                }
              }
            }
          }
        }
      }
    }
  }
}

tpl [formula] mode="conjecture" {
  <Item {
    @kind = "Theorem-Item";
    <Proposition {
      apply [*[1]]; // render the formula
    }
    <Block {
      @kind = "Proof";
      <Item {
        @kind = "Assumption";
        <Single-Assumption {
          apply [following-sibling::formula[@status = "negated_conjecture"][1]] mode="no-justification";
        }
      }
      for-each [following-sibling::formula[@status = "negated_conjecture"][position() > 1]] {
        apply [.] mode="full"; // "full" == label, proposition, justification
      }
      <Item {
        @kind = "Conclusion";
        @shape = "Compact-Statement";
        <Proposition {
          <Thesis;
        }
        <Straightforward-Justification {
          <Local-Reference {
            for-each [following-sibling::formula[@name and @status = "negated_conjecture"][position() = last()]] {
              $n = `@name`;
              if [key ("axiom", $n)] {
                for-each [key ("axiom", $n)] {
                  for-each [source] {
                    for-each [non-logical-data[@name = "file"]] {
                      for-each [non-logical-data[position() = last()]] {
                        $safe-name = capitalize-after-underscore (#string = `@name`);
                        @spelling = $safe-name;
                      }
                    }
                  }
                }
              } else {
                $safe-name = capitalize-after-underscore (#string = $n);
                $step-name = `concat ("Step", $safe-name)`;
                @spelling = $step-name;
              }
            }
          }
        }
      }
    }
  }
}

tpl [formula[@name and not(@name = "")]] mode="no-justification" {
  <Proposition {
    <Label {
      $safe-name = capitalize-after-underscore (#string = `@name`);
      $step-name = `concat ("Step", $safe-name)`;
      @spelling = $step-name;
    }
    apply [*[1]];
  }
}

tpl [formula[@name and not(@name = "")]] mode="full" {
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        $safe-name = capitalize-after-underscore (#string = `@name`);
        $step-name = `concat ("Step", $safe-name)`;
        @spelling = $step-name;
      }
      apply [*[1]] mode="strip-universal-prefix";
    }
    <Straightforward-Justification {
      for-each [source] {
        choose {
          when [number[@name]] {
            for-each [number[@name]] {
              $n = `@name`;
              <Local-Reference {
                if [key ("axiom", $n)] {
                  for-each [key ("axiom", $n)] {
                    for-each [source] {
                      for-each [non-logical-data[@name = "file"]] {
                        for-each [non-logical-data[position() = last()]] {
                          $safe-name = capitalize-after-underscore (#string = `@name`);
                          @spelling = $safe-name;
                        }
                      }
                    }
                  }
                } else {
                  $safe-name = capitalize-after-underscore (#string = $n);
                  $step-name = `concat ("Step", $safe-name)`;
                  @spelling = $step-name;
                }
              }
            }
          }
          when [non-logical-data[@name = "inference"]] {
            for-each [non-logical-data[@name = "inference"]] {
              for-each [non-logical-data[position() = last()]] {
                for-each [number[@name]] {
                  <Local-Reference {
                    $n = `@name`;
                    if [key ("axiom", $n)] {
                      for-each [key ("axiom", $n)] {
                        for-each [source] {
                          for-each [non-logical-data[@name = "file"]] {
                            for-each [non-logical-data[position() = last()]] {
                              $safe-name = capitalize-after-underscore (#string = `@name`);
                              @spelling = $safe-name;
                            }
                          }
                        }
                      }
                    } else {
                      $safe-name = capitalize-after-underscore (#string = $n);
                      $step-name = `concat ("Step", $safe-name)`;
                      @spelling = $step-name;
                    }
                  }
                }
              }
            }
          }
          otherwise {
            apply [.] mode="trace";
            msg terminate="yes" "Error: Unable to figure out how to deal with the justification of a formula";
          }
        }
      }
    }
  }
}

//////////////////////////////////////////////////////////////////////
// Terms
//////////////////////////////////////////////////////////////////////

tpl [variable[@name and not(@name = "")]] {
  <Variable {
    @spelling = `@name`;
  }
}

tpl [function[@name and not(@name = "")]] {
  <Infix-Term {
    @spelling = `@name`;
    <Arguments;
    <Arguments {
      apply [*];
    }
  }
}

//////////////////////////////////////////////////////////////////////
// Formulas
//////////////////////////////////////////////////////////////////////

tpl [*] mode="strip-universal-prefix" {
  apply [.]; // if we don't handle it, just move along
}

tpl [quantifier[@type = "universal"]] mode="strip-universal-prefix" {
  apply [*[position() = last()]] mode="strip-universal-prefix";
}

tpl [quantifier[@type = "universal"]] (#started, #variables) {
  if [$started = "1"] {
    if [$variables] {
      $variable = `$variables[1]`;
      <Universal-Quantifier-Formula {
        <Implicitly-Qualified-Segment {
          apply [$variable];
        }
        apply [.] (#started = "1",
	      	   #variables = `$variables[position() > 1]`);
      }
    } else {
      apply [*[position() = last()]];
    }
  } else {
    apply [.] (#started = "1",
    	       #variables = `variable`);
  }
}

tpl [quantifier[@type = "existential"]] (#started, #variables) {
  if [$started = "1"] {
    if [$variables] {
      $variable = `$variables[1]`;
      <Existential-Quantifier-Formula {
        <Implicitly-Qualified-Segment {
          apply [$variable];
        }
        apply [.] (#started = "1",
	      	   #variables = `$variables[position() > 1]`);
      }
    } else {
      apply [*[position() = last()]];
    }
  } else {
    apply [.] (#started = "1",
    	       #variables = `variable`);
  }
}

tpl [implication[count(*) = 2]] {
  <Conditional-Formula {
    apply [*[1]];
    apply [*[2]];
  }
}

tpl [equivalence[count(*) = 2]] {
  <Biconditional-Formula {
    apply [*[1]];
    apply [*[2]];
  }
}

tpl [negation[count(*) = 1]] {
  <Negated-Formula {
    apply [*[1]];
  }
}

tpl [conjunction[count(*) = 2]] {
  <Conjunctive-Formula {
    apply [*[1]];
    apply [*[2]];
  }
}

tpl [disjunction[count(*) = 2]] {
  <Disjunctive-Formula {
    apply [*[1]];
    apply [*[2]];
  }
}

tpl [predicate[@name = "="]] {
  <Predicative-Formula {
    @spelling = "=";
    <Arguments {
      apply [*[1]];
    }
    <Arguments {
      apply [*[2]];
    }
  }
}

tpl [predicate[@name and not(@name = "=")]] {
  <Predicative-Formula {
    @spelling = `@name`;
    <Arguments;
    <Arguments {
      apply [*];
    }
  }
}

tpl [defined-predicate[@name = "true"]] {
  <Negated-Formula {
    <Contradiction;
  }
}

tpl [defined-predicate[@name = "false"]] {
  <Contradiction;
}

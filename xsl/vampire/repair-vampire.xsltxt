stylesheet "1.0";
include "../tstp/tstp2wsx.xsl";
include "../utils/token-strings.xsl";
output method="xml" indent="yes";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

// Two token lists whose tokens are comma-separated
//
//   <step-name>:<path of XMLized solution>
//
// The intention the step <step-name> will be proved using the
// contents contained in the document with the indicated path.

// The clausifications (from E)
#clausifications = { ""; }

// The proofs of the clausified problems (from Prover9/Ivy)
#herbrand-proofs = { ""; }

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [*] mode="copy" {
  $n = `name (.)`;
  <$n {
    for-each [@*] { copy-of `.`; }
    apply [*] mode="copy";
  }
}

tpl every-repair-proof-exists (#repairs) {
  $empty = token-string-is-empty (#token-string = $repairs);
  if [$empty = "1"] {
    "1";
  } else {
    $head = token-string-head (#token-string = $repairs);
    $tail = token-string-tail (#token-string = $repairs);
    $path = `substring-after ($head, ":")`;
    if [document ($path, /)] {
      every-repair-proof-exists (#repairs = $tail);
    } else {
      "0";
    }
  }
}

tpl [/] {
  if [tstp] {
    if [$clausifications = "" and $herbrand-proofs = "1"] {
      apply [tstp] mode="copy";
    } else {
      $clausifications-valid = is-valid-token-string (#string = $clausifications);
      $herbrand-proofs-valid = is-valid-token-string (#string = $herbrand-proofs);
      if [$clausifications-valid = "1" and $herbrand-proofs-valid = "1"] {
        $every-clausification-exists
          = every-repair-proof-exists (#repairs = $clausifications);
        $every-herbrand-proof-exists
          = every-repair-proof-exists (#repairs = $herbrand-proofs);
        if [$every-clausification-exists = "1" and $every-herbrand-proof-exists = "1"] {
          apply [tstp];
        } else {
          msg terminate="yes" "Error: at least one of the given repair proof documents does not exist (or could not be loaded)";
        }
      } else {
        msg terminate="yes" "Error: the string given as the value of the clausifications or herbrand-proofs stylesheet parameter is not a valid token string.";
      }
    }

  } else {
    msg terminate="yes" "Error: the required tstp document element is missing.";
  }
}

tpl [tstp] {
  <Text-Proper {
    @articleid = "ARTICLE";
    <Item { @kind = "Section-Pragma"; }
    for-each [formula[@status = "axiom"]] {
      apply [.] mode="axiom";
    }
    for-each [formula[not(@status = "axiom") and source/non-logical-data[@name = "inference"]]] {
      $depends-on-conjecture = depends-on-conjecture ();
      if [$depends-on-conjecture = "0"] {
        apply [.] mode="lemma";
      }
    }
    for-each [formula[@status = "conjecture"]] {
      apply [.] mode="conjecture";
    }
  }
}

tpl [*] (#step, #herbrand-proof) mode="imported-eprover-clausification" {
  msg terminate="yes" "Error: unhandled node in imported-eprover-clausification mode.";
}

tpl [*] (#step) mode="imported-ivy-refutation" {
  msg terminate="yes" "Error: unhandled node in imported-ivy-refutation mode.";
}

tpl [*] (#step) mode="imported-eprover-axiom" {
  msg terminate="yes" "Error: unhandled node in imported-eprover-axiom mode.";
}

tpl [formula[@name]] (#step) mode="imported-eprover-axiom" {
  $n = `@name`;
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        @spelling = `concat ($step, $n)`;
      }
      apply [*[1]] mode="strip-universal-prefix";
    }
    <Straightforward-Justification {
      <Local-Reference {
        @spelling = `concat ($step, $n)`;
      }
    }
  }
}

tpl [*] (#step) mode="imported-eprover-conclusion" {
  msg terminate="yes" "Error: unhandled node in imported-eprover-conclusion mode.";
}

tpl [*] (#step) mode="imported-eprover-lemma" {
  msg terminate="yes" "Error: unhandled node in imported-eprover-lemma mode.";
}

tpl [non-logical-data[@name = "inference"]] (#step) mode="imported-eprover-lemma" {
  for-each [non-logical-data[position() = last()]] {
    for-each [non-logical-data[@name and not(*)] | number[@name]] {
      $n = `@name`;
      <Local-Reference {
        @spelling = `concat ($step, $n)`;
      }
    }
  }
}

tpl [source] (#step) mode="imported-eprover-lemma" {
  $step-uc = uc (#s = $step);
  for-each [non-logical-data[@name = "inference"]] {
    apply [.] (#step = $step) mode="imported-eprover-lemma";
    if [non-logical-data[@name = "skolemize"]] {
      <Definition-Reference {
        @spelling = $step-uc;
        @"number" = `count (preceding::formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "skolemize"]]) + 1`;
      }
    }
  }
}

tpl [formula[@name]] (#step) mode="imported-eprover-lemma" {
  $n = `@name`;
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        @spelling = `concat ($step, $n)`;
      }
      apply [*[1]] mode="strip-universal-prefix";
    }
    <Straightforward-Justification {
      for-each [source] {
        apply [.] (#step = $step) mode="imported-eprover-lemma";
      }
    }
  }
}

tpl [formula[@name]] (#step) mode="imported-eprover-raa" {
  $n = `@name`;
  <Item {
    @kind = "Assumption";
    <Single-Assumption {
      <Proposition {
        <Label {
          @spelling = `concat ($step, $n)`;
        }
        apply [*[1]] mode="strip-universal-prefix";
      }
    }
  }
}

tpl [tstp[not(formula[@status = "conjecture"])]] (#step, #herbrand-proof) mode="imported-eprover-clausification" {
  apply [.] (#message = "Error: Don't know how to deal with imported E clausifications that lack a conjecture formula.") mode="die";
}

tpl [tstp[formula[@status = "conjecture"]]] (#step, #herbrand-proof) mode="imported-eprover-clausification" {
  for-each [formula[not(@status = "conjecture") and not(@status = "negated_conjecture")]] {
    apply [.] (#step = $step) mode="imported-eprover-lemma";
  }
  for-each [formula[@status = "conjecture"]] {
    $n = `@name`;
    <Item {
      @kind = "Regular-Statement";
      @shape = "Compact-Statement";
      <Proposition {
        <Label {
          @spelling = `concat ($step, $n)`;
        }
        apply [*[1]] mode="strip-universal-prefix";
      }
      <Block {
        @kind = "Proof";
        <Item {
          @kind = "Regular-Statement";
	  @shape = "Diffuse-Statement";
          <Block {
            @kind = "Now-Reasoning";
            for-each [following-sibling::formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "assume_negation"]]] {
              apply [.] (#step = $step) mode="imported-eprover-raa";
            }
            for-each [following-sibling::formula[not(source/non-logical-data[@name = "inference"]/non-logical-data[@name = "assume_negation"])]] {
              apply [.] (#step = $step) mode="imported-eprover-lemma";
            }
            for-each [document ($herbrand-proof, /)] {
              apply [.] (#step = $step) mode="imported-ivy-refutation";
            }
            <Item {
              @kind = "Conclusion";
              @shape = "Compact-Statement";
              <Proposition {
                <Contradiction;
              }
              <Straightforward-Justification {
                <Link;
                for-each [ancestor::tstp] {
                  for-each [formula[@name and not(@status = "conjecture") and not(source/non-logical-data[@name = "inference"]/non-logical-data[@name = "assume_negation"])]] {
                    $local-name = `@name`;
                    <Local-Reference {
                      @spelling = `concat ($step, $local-name)`;
                    }
                  }
                }
              }
            }
          }
        }
        <Item {
          @kind = "Conclusion";
          @shape = "Compact-Statement";
          <Proposition {
            <Thesis;
          }
          <Straightforward-Justification {
            <Link;
          }
        }
      }
    }
  }
}

tpl [tstp] (#step) mode="imported-ivy-refutation" {
  $aid-uc = uc (#s = $article);
  <Item {
    @kind = "Regular-Statement";
    @shape = "Diffuse-Statement";
    <Block {
      @kind = "Now-Reasoning";
      for-each [formula[source/non-logical-data[@name = "input"]]] {
        apply [.] (#step = $step) mode="ivy-assumption";
      }
      for-each [formula[position() < last() and not(source/non-logical-data[@name = "input"])]] {
        apply [.] (#step = $step) mode="ivy-lemma";
      }
      for-each [formula[position() = last()]] {
        apply [.] (#step = $step) mode="ivy-conclusion";
      }
    }
  }
}

tpl [formula[@name]] (#step) mode="ivy-assumption" {
  $n = `@name`;
  <Item {
    @kind = "Assumption";
    <Single-Assumption {
      <Proposition {
        <Label {
          @spelling = `concat ($step, $n)`;
        }
        apply [*[1]] mode="strip-universal-prefix";
      }
    }
  }
}

tpl [source] (#step) mode="ivy-source"{
  <Straightforward-Justification {
    for-each [non-logical-data] {
      for-each [non-logical-data[position() = last()]] {
        for-each [non-logical-data[@name] | number[@name]] {
          $n = `@name`;
          <Local-Reference {
            @spelling = `concat ($step, $n)`;
          }
        }
      }
    }
  }
}

tpl [formula[@name]] (#step) mode="ivy-lemma" {
  $n = `@name`;
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        @spelling = `concat ($step, $n)`;
      }
      apply [*[1]] mode="strip-universal-prefix";
    }
    apply [source] (#step = $step) mode="ivy-source";
  }
}

tpl [formula[@name]] (#step) mode="ivy-conclusion" {
  $n = `@name`;
  <Item {
    @kind = "Conclusion";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        @spelling = `concat ($step, $n)`;
      }
      apply [*[1]] mode="strip-universal-prefix";
    }
    apply [source] (#step = $step) mode="ivy-source";
  }
}


//////////////////////////////////////////////////////////////////////
// Keys
//////////////////////////////////////////////////////////////////////

key "splits"
    [formula[@name and source/non-logical-data[@name = "introduced"]/non-logical-data[@name = "backtracking_splitting_component"]]]
    `@name`;

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [tstp] mode="nested" {
  for-each [formula[@status = "axiom"]] {
    apply [.] mode="axiom";
  }
  for-each [formula[not(@status = "axiom") and source/non-logical-data[@name = "inference"]]] {
    $depends-on-conjecture = depends-on-conjecture ();
    if [$depends-on-conjecture = "0"] {
      apply [.] mode="lemma";
    }
  }
  for-each [formula[@status = "conjecture"]] {
    apply [.] mode="conjecture";
  }
}

tpl [*] mode="private-predicate-definition" {
  apply [.] (#message = "Error: we have reached an unhandled node in private-predicate-definition mode.") mode="die";
}

tpl [formula[source/non-logical-data[@name = "introduced"]/non-logical-data[@name = "backtracking_splitting_component"]]] mode="private-predicate-definition" {
  for-each [*[1]] {
    <Item {
      @kind = "Private-Predicate-Definition";
      for-each [*[position() = last()]] {
        choose {
          when [self::negation] {
            msg "negation case";
            if [defined-predicate[@name]] {
              for-each [defined-predicate[@name]] {
                <Variable {
                  @spelling = `@name`;
                }
                <Type-List;
                <Negated-Formula {
                  for-each [parent::negation] {
                    apply [preceding-sibling::*[1]];
                  }
                }
              }
            } else {
              $n = `name (.)`;
              $message = `concat ("Error: Don't know how to handle a ", $n, " node.  Where is the predicate definition?")`;
              apply [.] (#message = $message) mode="die";
            }
          }
          when [defined-predicate[@name]] {
            for-each [defined-predicate[@name]] {
              <Variable {
                @spelling = `@name`;
              }
              <Type-List;
              apply [preceding-sibling::*[1]];
            }
          }
          otherwise {
            $n = `name (.)`;
            $message = `concat ("Error: Don't know how to handle a ", $n, " node.  Where is the predicate definition?")`;
            apply [.] (#message = $message) mode="die";
          }
        }
      }
    }
  }
}

tpl [tstp] mode="flat" {
  // reserve variables
  for-each [formula[@name]] {
    $n = `@name`;
    $pseudo-token = `concat (",", $n, ":")`;
    if [contains ($clausifications, $pseudo-token)
          and contains ($herbrand-proofs, $pseudo-token)] {
      $after-pseudo-token-clausifications
        = `substring-after ($clausifications, $pseudo-token)`;
      $clausification-proof-path
        = `substring-before ($after-pseudo-token-clausifications, ",")`;
      $after-pseudo-token-herbrand-proofs
        = `substring-after ($herbrand-proofs, $pseudo-token)`;
      $herbrand-proof-path
        = `substring-before ($after-pseudo-token-herbrand-proofs, ",")`;
      for-each [document ($clausification-proof-path, /)] {
        reserve-variables ();
      }
      for-each [document ($herbrand-proof-path, /)] {
        reserve-variables ();
      }
    }
  }
  for-each [formula[@status = "axiom"]] {
    apply [.] mode="axiom";
  }
  <Item {
    @kind = "Regular-Statement";
    @shape = "Diffuse-Statement";
    <Label {
      @spelling = "Refutation";
    }
    <Block {
      @kind = "Now-Reasoning";
      for-each [formula[not(@status = "axiom")]] {
        choose {
          when [@status = "negated_conjecture"] {
            <Item {
              @kind = "Assumption";
              <Single-Assumption {
                apply [.] mode="no-justification";
              }
            }
          }
          when [source/non-logical-data[@name = "introduced"]/non-logical-data[@name = "backtracking_splitting_component"]] {
            apply [.] mode="private-predicate-definition";
          }
          when [position() = last()] {
            apply [.] mode="conclusion";
          }
          otherwise {
            apply [.] mode="lemma";
          }
        }
      }
    }
  }
  <Item {
    @kind = "Theorem-Item";
    for-each [formula[@status = "negated_conjecture"]] {
      <Proposition {
        apply [*[1]] mode="unnegate"; // render the formula
      }
    }
    <Straightforward-Justification {
      <Local-Reference {
        @spelling = "Refutation";
      }
    }
  }
}

tpl [tstp[formula[@status = "negated_conjecture"]]] {
  $aid-uc = uc (#s = $article);
  <Text-Proper {
    @articleid = $aid-uc;
    <Item {
      @kind = "Section-Pragma";
    }
    reserve-variables ();
    choose {
      when [$shape = "flat"] {
        apply [.] mode="flat";
      }
      when [$shape = "nested"] {
        apply [.] mode="nested";
      }
      otherwise {
        apply [.] mode="flat";
      }
    }
  }
}

tpl [non-logical-data[@name = "inference"]] {
  for-each [non-logical-data[position() = last()]] {
    for-each [non-logical-data[@name]] {
      $n = `@name`;
      if [key ("splits", $n)] {

      } else {
        <Local-Reference {
          @spelling = `@name`;
        }
      }
    }
  }
}

tpl [source] {
  for-each [non-logical-data[@name = "inference"]] {
    apply [.];
    if [non-logical-data[@name = "skolemisation"]] {
      <Definition-Reference {
        @spelling = "SKOLEM";
        @"number" = `count (preceding::formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "skolemisation"]]) + 1`;
      }
    }
  }
}

tpl [formula[@name]] (#linked) mode="lemma" {
  $n = `@name`;
  $pseudo-token = `concat (",", $n, ":")`;
  if [contains ($clausifications, $pseudo-token)
        and contains ($herbrand-proofs, $pseudo-token)] {
    $after-pseudo-token-clausifications
      = `substring-after ($clausifications, $pseudo-token)`;
    $clausification-proof-path
      = `substring-before ($after-pseudo-token-clausifications, ",")`;
    $after-pseudo-token-herbrand-proofs
      = `substring-after ($herbrand-proofs, $pseudo-token)`;
    $herbrand-proof-path
      = `substring-before ($after-pseudo-token-herbrand-proofs, ",")`;
    <Item {
      @kind = "Regular-Statement";
      @shape = "Compact-Statement";
      <Proposition {
        <Label {
          @spelling = $n;
        }
        apply [*[1]] mode="strip-universal-prefix";
      }
      <Block {
        @kind = "Proof";
        for-each [document ($clausification-proof-path, /)] {
          apply [.] (#step = $n,
	  	     #herbrand-proof = $herbrand-proof-path) mode="imported-eprover-clausification";
        }
        <Item {
          @kind = "Conclusion";
          @shape = "Compact-Statement";
          <Proposition {
            <Thesis;
          }
          <Straightforward-Justification {
            <Link;
            for-each [document ($clausification-proof-path, /)] {
              if [not(tstp/formula[@status = "conjecture"])] {
	        msg terminate="yes" "no conjecture";
              }
              for-each [tstp/formula[@status = "conjecture"]] {
                $local-name = `@name`;
                <Local-Reference {
                  @spelling = `concat ($n, $local-name)`;
                }
              }
            }
          }
        }
      }
    }
  } else {
    <Item {
      @kind = "Regular-Statement";
      @shape = "Compact-Statement";
      <Proposition {
        <Label {
          @spelling = `@name`;
        }
        apply [*[1]] mode="strip-universal-prefix";
      }
      <Straightforward-Justification {
        if [$linked = "1"] {
          <Link;
        }
        for-each [source] {
          apply [.];
        }
      }
    }
  }
}

tpl [defined-predicate[@name and not(@name = "true") and not(@name = "false")]] {
  <Private-Predicate-Formula {
    @spelling = `@name`;
  }
}

tpl [*] mode="unnegate" {
  apply [.] (#message = "Error: we have reached an unhandled node in unnegate mode.") mode="die";
}

tpl [negation] mode="unnegate" {
  apply [*[1]];
}

tpl [formula[@name and not(@name = "")]] mode="conclusion" {
  <Item {
    @kind = "Conclusion";
    @shape = "Compact-Statement";
    <Proposition {
      apply [*[1]];
    }
    <Straightforward-Justification {
      for-each [source] {
        apply [.];
      }
    }
  }
}

tpl [formula[@name and not(@name = "")]] (#step) mode="imported-eprover-conclusion" {
  <Item {
    @kind = "Conclusion";
    @shape = "Compact-Statement";
    <Proposition {
      apply [*[1]];
    }
    <Straightforward-Justification {
      for-each [source] {
        apply [.] (#step = $step) mode="imported-eprover-lemma";
      }
    }
  }
}
stylesheet "1.0";
include "../utils/token-strings.xsl";
include "../utils/die.xsl";
include "../utils/trace.xsl";
include "mizar-to-tptp.xsl";
output method="xml" indent="yes";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

// A token string listing the errors that should be repaired.  The
// tokens of the token string should look like
//
// <line-number>:<column-number>:<error-number>
#errors = { ""; }

//////////////////////////////////////////////////////////////////////
// Keys
//////////////////////////////////////////////////////////////////////

key "formulas"
    [Item[Proposition/Label[@spelling]]]
    `Proposition/Label[@spelling]/@spelling`;

//////////////////////////////////////////////////////////////////////
// Utilities
//////////////////////////////////////////////////////////////////////

tpl all-errors-present-in-text (#errs) {
  $empty = token-string-is-empty (#token-string = $errs);
  if [$empty = "1"] {
    "1";
  } else {
    $head = token-string-head (#token-string = $errs);
    $tail = token-string-tail (#token-string = $errs);
    $error-line = error-line (#token = $head);
    $error-col = error-column (#token = $head);
    if [descendant::*[@line = $error-line and @col = $error-col]] {
      all-errors-present-in-text (#errs = $tail);
    } else {
      "0";
    }
  }
}

tpl token-is-valid (#token) {
  "1";
}

tpl error-line (#token) {
  `substring-before ($token, ":")`;
}

tpl error-column (#token) {
  $after-first-colon = `substring-after ($token, ":")`;
  `substring-before ($after-first-colon, ":")`;
}

tpl error-code (#token) {
  $after-first-colon = `substring-after ($token, ":")`;
  `substring-after ($after-first-colon, ":")`;
}

tpl handled-error-code (#error-code) {
  if [$error-code = "4"] {
    "1";
  } else {
    "0";
  }
}

tpl some-error-in-same-justification (#errs, #line, #column) {
  $empty = token-string-is-empty (#token-string = $errs);
  if [$empty = "1"] {
    "0";
  } else {
    $head = token-string-head (#token-string = $errs);
    $tail = token-string-tail (#token-string = $errs);
    $next-error-line = error-line (#token = $head);
    $next-error-col = error-column (#token = $head);
    for-each [ancestor::Text-Proper] {
      for-each [descendant::*[@line = $next-error-line and @col = $next-error-col]] {
        for-each [ancestor::Straightforward-Justification] {
          if [descendant::*[@line = $line and @col = $column]] {
            "1";
          } else {
            some-error-in-same-justification (#errs = $tail,
                                              #line = $line,
                                              #col = $col);
          }
        }
      }
    }
  }
}

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [/] {
  if [Text-Proper] {
    if [$errors = ""] {
      <problems {
        apply [Text-Proper] (#errs = ",,");
      }
    } else {
      $ok = is-valid-token-string (#string = $errors);
      if [$ok = "1"] {
        $all-known = all-errors-present-in-text (#errs = $errors);
        if [$all-known = "1"] {
          <problems {
            apply [Text-Proper] (#errs = $errors);
          }
        } else {
          msg terminate="yes" "Error: at least one error could not be found in the text.";
        }
      } else {
        msg terminate="yes" "Error: the value for the errors stylesheet parameter is not a valid token string.";
      }
    }
  } else {
    msg terminate="yes" "Error: the required Text-Proper document element is missing.";
  }
}

tpl [Text-Proper] (#errs) {
  $empty = token-string-is-empty (#token-string = $errs);
  if [$empty = "0"] {
    $head = token-string-head (#token-string = $errs);
    $tail = token-string-tail (#token-string = $errs);
    $error-code = error-code (#token = $head);

    $handled = handled-error-code (#error-code = $error-code);
    if [$handled = "0"] {
      $message = `concat ("Error: we do not handle error code ", $error-code)`;
      apply [.] (#message = $message) mode="die";
    }

    $error-line = error-line (#token = $head);
    $error-col = error-column (#token = $head);
    $handled-later = some-error-in-same-justification (#errs = $tail,
                                                       #line = $error-line,
                                                       #col = $error-col);
    if [$handled-later = "1"] {
      apply [.] (#errs = $tail);
    } else {
      if [not(descendant::*[@line = $error-line and @col = $error-col])] {
        $message = `concat ("Error: there is no node at line ", $error-line, " and column ", $error-col, ".")`;
        apply [.] (#message = $message) mode="die";
      }

      <tstp {

        for-each [descendant::Straightforward-Justification[@line = $error-line and @col = $error-col]] {

          // Get the name of the problem
          if [not(ancestor::Item[@kind = "Regular-Statement" and @shape = "Compact-Statement" and Proposition/Label[@spelling]])] {
            apply [.] (#message = "Error: we cannot make a problem without a name.") mode="die";
          }
          for-each [ancestor::Item[@kind = "Regular-Statement" and @shape = "Compact-Statement" and Proposition/Label[@spelling]]] {
            for-each [Proposition/Label[@spelling]] {
              @"name" = `@spelling`;
            }
          }

          // Gather the premises
          for-each [*[@spelling and not(@spelling = following-sibling::*[@spelling]/@spelling)]] {
            $n = `@spelling`;
            choose {
              when [key ("formulas", $n)] {
                for-each [key ("formulas", $n)] {
                  apply [.] mode="axiom";
                }
              }
              otherwise {
                $message = `concat ("Error: we failed to look up the formula with the name '", $n, "'.  We are currently handling the error token '", $head, "'.")`;
                msg $message;
                // apply [.] (#message = $message) mode="die";
              }
            }
          }
          for-each [ancestor::Item[@kind = "Regular-Statement" and @shape = "Compact-Statement"]] {
            apply [.] mode="conjecture";
          }
        }
      }
      apply [.] (#errs = $tail);
    }
  }
}

//////////////////////////////////////////////////////////////////////
// Rendering fromulas
//////////////////////////////////////////////////////////////////////

tpl [*] mode="axiom" {
  $n = `name (.)`;
  $message = `concat("Error: we have arrived at an unhandled ", $n, " node in axiom mode.")`;
  apply [.] (#message = $message) mode="die";
}

tpl [*] mode="conjecture" {
  $n = `name (.)`;
  $message = `concat("Error: we have arrived at an unhandled ", $n, " node in conjecture mode.")`;
  apply [.] (#message = $message) mode="die";
}

tpl [Item[@kind = "Regular-Statement" and @shape = "Compact-Statement"]] mode="axiom" {
  apply [Proposition] mode="axiom";
}

tpl [Proposition[Label[@spelling]]] mode="axiom" {
  <formula {
    for-each [Label[@spelling]] {
      @"name" = `@spelling`;
    }
    @status = "axiom";
    @syntax = "formula";
    apply [*[position() = last()]] mode="mizar-to-tptp";
  }
}

tpl [Item[@kind = "Regular-Statement" and @shape = "Compact-Statement" and Proposition]] mode="conjecture" {
  apply [Proposition] mode="conjecture";
}

tpl [Proposition[Label[@spelling]]] mode="conjecture" {
  <formula {
    for-each [Label[@spelling]] {
      @"name" = `@spelling`;
    }
    @status = "conjecture";
    @syntax = "formula";
    apply [*[position() = last()]] mode="mizar-to-tptp";
  }
}
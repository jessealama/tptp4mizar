stylesheet "1.0";
include "../utils/token-strings.xsl";
output method="xml" indent="yes";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

// A list of recommendations to try
#recommendations = { ""; }

//////////////////////////////////////////////////////////////////////
// Keys
//////////////////////////////////////////////////////////////////////

key "labelled-formulas"
    [Item[Proposition/Label[@spelling]]]
    `Proposition/Label[@spelling]/@spelling`;

//////////////////////////////////////////////////////////////////////
// Utilities
//////////////////////////////////////////////////////////////////////

tpl [*] mode="trace" {
  msg "We are about to terminate the XSLT processor.  Here's where we are:";
  apply [.] mode="trace-recursive";
}

tpl [*] mode="trace-recursive" {
  $n = `name (.)`;
  $position = `count (preceding-sibling::*[name() = $n]) + 1`;
  if [parent::*] {
    apply [..] mode="trace-recursive";
  }
  `$n`; "["; `$position`; "]"; "\n";
}

tpl [*] (#message) mode="die" {
  apply [.] mode="trace";
  msg terminate="yes" $message;
}

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [/] {
  if [Text-Proper] {
    apply [Text-Proper];
  } else {
    msg terminate="yes" "Error: the Text-Proper root element is missing.";
  }
}

tpl [*] {
  $n = `name (.)`;
  <$n {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

tpl [*] mode="copy" {
  $n = `name (.)`;
  <$n {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

tpl fragile-recommendation-applied-to-any (#candidates) {
  if [$candidates] {
    $candidate = `$candidates[1]`;
    $candidate-line = `$candidate/@line`;
    $candidate-col = `$candidate/@col`;
    $token = `concat (",", $candidate-line, ":", $candidate-col, ":", "604", ",")`;
    if [contains ($recommendations, $token)] {
      "1";
    } else {
      $remaining-candidates = `$candidates[position() > 1]`;
      fragile-recommendation-applied-to-any (#candidates = $remaining-candidates);
    }
  } else {
    "0";
  }
}

tpl consider-recommendation (#recommendation) {
  choose {
    when [$recommendation = "601"] { // chklab
      $message = "chklab recommendation accepted; rewriting justification.";
      msg $message;
      // nothing further to do
    }
    when [$recommendation = "604"] {
      // Check whether there is already a reference in the current
      // list of references to which we have already applied the 604
      // recommendation.  If there is none, then let's go for it.
      // Otherwise, don't do anything; we don't want to apply multiple
      // 604 recommendations because this can lead to trouble.
      $recommendation-already-applied = fragile-recommendation-applied-to-any (#candidates = `preceding-sibling::Local-Reference`);
      if [$recommendation-already-applied = "1"] {
        msg "We have already accepted a 604 recommendation for the current list of references; not rewriting...";
        apply [.] mode="copy";
      } else {
        $message = "604 recommendation accepted; rewriting justification.";
        msg $message;
        if [self::*[@spelling]] {
          $formula-name = `@spelling`;
          if [key ("labelled-formulas", $formula-name)] {
            for-each [key ("labelled-formulas", $formula-name)] {
              if [Straightforward-Justification] {
                for-each [Straightforward-Justification] {
                  apply [*] mode="copy";
                }
              } else {
                apply [.] (#message = "Error: we expected to find a Straightforward-Justification child of the current item, but there is none.") mode="die";
              }
            }
          } else {
            $error = `concat ("Error: we cannot find formula '", $formula-name, "'.")`;
            apply [.] (#message = $error) mode="die";
          }
        } else {
          apply [.] (#message = "Error: we cannot accept a 604 recommendation because the current node lacks a spelling attribute.") mode="die";
        }
      }
    }
    when [$recommendation = "610"] {
      // Start to ignore some formulas (inacc)
      msg "Starting to ignore inaccessible formulas...";
    }
    when [$recommendation = "611"] {
      // Done ignoring formulas
      msg "Done ignoring formulas.";
    }
    when [$recommendation = "602"] {  // irrelevant reference
      msg "Ignoring irrelevant reference.";
      // ignore
    }
    otherwise {
      $message = `concat ("Warning: Unable to make sense of the recommendation '", $recommendation, "'.")`;
      msg terminate="yes" $message;
      apply [.] mode="copy";
    }
  }
}

tpl [Label[@spelling]] {
  $line = `@line`;
  $col = `@col`;
  $pseudo-token = `concat (",", $line, ":", $col, ":")`;
  if [contains ($recommendations, $pseudo-token)] {
    $after-token = `substring-after ($recommendations, $pseudo-token)`;
    $recommendation = `substring-before ($after-token, ",")`;
    consider-recommendation (#recommendation = $recommendation);
  } else {
    apply [.] mode="copy";
  }
}

tpl between-start-inacc-recommendation-1 (#a-line, #b-line, #a-col, #b-col, #recs) {
  $recs-empty = token-string-is-empty (#token-string = $recs);
  if [$recs-empty = "1"] {
    "0";
  } else {
    $head = token-string-head (#token-string = $recs);
    $tail = token-string-tail (#token-string = $recs);
    $after-first-comma = `substring-after ($head, ",")`;
    $line = `substring-before ($after-first-comma, ":")`;
    $after-first-colon = `substring-after ($after-first-comma, ":")`;
    $col = `substring-before ($after-first-colon, ":")`;
    $after-second-colon = `substring-after ($after-first-colon, ":")`;
    $recommendation = `substring-before ($after-second-colon, ",")`;
    if [$recommendation = "610"] {
      choose {
        when [$a-line < $line] {
          choose {
            when [$b-line < $line] {
              between-start-inacc-recommendation-1 (#a-line = $a-line,
                                            #b-line = $b-line,
                                            #a-col = $a-col,
                                            #b-col = $b-col,
                                            #recs = $tail);
            }
            when [$b-line = $line] {
              if [$col < $b-col] {
                "1";
              } else {
                between-start-inacc-recommendation-1 (#a-line = $a-line,
                                              #b-line = $b-line,
                                              #a-col = $a-col,
                                              #b-col = $b-col,
                                              #recs = $tail);
              }
            }
            when [$b-line > $line] {
              "1";
            }
          }
        }
        when [$a-line = $line] {
          if [$a-col < $col] {
            choose {
              when [$b-line < $line] {
                between-start-inacc-recommendation-1 (#a-line = $a-line,
                                              #b-line = $b-line,
                                              #a-col = $a-col,
                                              #b-col = $b-col,
                                              #recs = $tail);
              }
              when [$b-line = $line] {
                if [$col < $b-col] {
                  "1";
                } else {
                  between-start-inacc-recommendation-1 (#a-line = $a-line,
                                                #b-line = $b-line,
                                                #a-col = $a-col,
                                                #b-col = $b-col,
                                                #recs = $tail);
                }
              }
              when [$b-line > $line] {
                "1";
              }
            }
          } else {
            between-start-inacc-recommendation-1 (#a-line = $a-line,
                                          #b-line = $b-line,
                                          #a-col = $a-col,
                                          #b-col = $b-col,
                                          #recs = $tail);
          }
        }
        when [$a-line > $line] {
          between-start-inacc-recommendation-1 (#a-line = $a-line,
                                        #b-line = $b-line,
                                        #a-col = $a-col,
                                        #b-col = $b-col,
                                        #recs = $tail);
        }
      }
    } else {
      between-start-inacc-recommendation-1 (#a-line = $a-line,
                                    #b-line = $b-line,
                                    #a-col = $a-col,
                                    #b-col = $b-col,
                                    #recs = $tail);
    }
  }
}

tpl within-region (#line, #col, #region-start-line, #region-start-col, #region-end-line, #region-end-col) {
  choose {
    when [$line < $region-start-line] {
      "0";
    }
    when [$line = $region-start-line] {
      if [$region-start-col < $col] {
        "1";
      } else {
        "0";
      }
    }
    when [$line > $region-start-line] {
      choose {
        when [$line < $region-end-line] {
          "1";
        }
        when [$line = $region-end-line] {
          if [$col < $region-end-col] {
            "1";
          } else {
            "0";
          }
        }
        when [$line > $region-end-line] {
          "0";
        }
      }
    }
  }
}

tpl between-start-inacc-recommendation (#a-line, #a-col, #b-line, #b-col) {
  between-start-inacc-recommendation-1 (#a-line = $a-line,
                                #b-line = $b-line,
                                #a-col = $a-col,
                                #b-col = $b-col,
                                #recs = $recommendations);
}

tpl substring-after-final (#substring, #string) {
  if [contains ($string, $substring)] {
    $after-first = `substring-after ($string, $substring)`;
    if [contains ($after-first, $substring)] {
      substring-after-final (#substring = $substring,
                             #string = $after-first);
    } else {
      $after-first;
    }
  } else {
    "";
  }
}

tpl next-inacc-begin (#recs) {
  $pseudo-token = `concat (":", "610", ",")`;
  if [contains ($recs, $pseudo-token)] {
    $before-pseudo-token = `substring-before ($recs, $pseudo-token)`;
    substring-after-final (#string = $before-pseudo-token,
    			   #substring = ",");
  } else {
    "";
  }
}

tpl next-inacc-end (#recs) {
  $pseudo-token = `concat (":", "611", ",")`;
  if [contains ($recs, $pseudo-token)] {
    $before-pseudo-token = `substring-before ($recs, $pseudo-token)`;
    substring-after-final (#string = $before-pseudo-token,
    			   #substring = ",");
  } else {
    "";
  }
}

tpl within-inacc-block-1 (#line, #col, #recs) {
  $empty = token-string-is-empty (#token-string = $recs);
  if [$empty = "1"] {
    "0";
  } else {
    $inacc-begin-token = next-inacc-begin (#recs = $recs);
    if [$inacc-begin-token = ""] {
      "0";
    } else {
      $inacc-end-token = next-inacc-end (#recs = $recs);
      if [$inacc-end-token = ""] {
        msg terminate="yes" "Error: we found a 610 recommendation without a matching 611 recommendation.";
      } else {
        $inacc-msg = `concat ("We found an inacc block: ", $inacc-begin-token, " to ", $inacc-end-token)`;
        // msg $inacc-msg;
        $inacc-begin-line = `substring-before ($inacc-begin-token, ":")`;
        $inacc-begin-col = `substring-after ($inacc-begin-token, ":")`;
        $inacc-end-line = `substring-before ($inacc-end-token, ":")`;
        $inacc-end-col = `substring-after ($inacc-end-token, ":")`;
        $within = within-region (#line = $line,
                                 #col = $col,
                                 #region-start-line = $inacc-begin-line,
                                 #region-start-col = $inacc-begin-col,
                                 #region-end-line = $inacc-end-line,
                                 #region-end-col = $inacc-end-col);
        if [$within = "1"] {
          "1";
        } else {
          $pseudo-token = `concat (":", "611", ",")`;
          $after-pseudo-token = `substring-after ($recs, $pseudo-token)`;
          if [$after-pseudo-token = ""] {
            "0";
          } else {
            within-inacc-block-1 (#line = $line,
	    			  #col = $col,
				  #recs = `concat (",", $after-pseudo-token)`);
          }
        }
      }
    }
  }
}

tpl within-inacc-block (#line, #col) {
  within-inacc-block-1 (#line = $line,
                        #col = $col,
                        #recs = $recommendations);
}

tpl [Item[Proposition]] {
  $item = `.`;
  $current-line = `@line`;
  $current-col = `@col`; // for inacc
  $within = within-inacc-block (#line = $current-line, #col = $current-col);
  if [$within = "1"] {
    if [following-sibling::Item] {
      // keep skipping
      msg "Skipping an item inside an inacc block";
    } else {
      msg "Although this item is in an inaccessible block, it is the final item of the current block.  Refusing to delete it.";
      apply [.] mode="copy";
    }
  } else {
    apply [.] mode="copy";
  }
}

tpl [Local-Reference[@line and @col]] {
  $line = `@line`;
  $col = `@col`;
  $pseudo-token = `concat (",", $line, ":", $col, ":")`;
  if [contains ($recommendations, $pseudo-token)] {
    $after-token = `substring-after ($recommendations, $pseudo-token)`;
    $recommendation = `substring-before ($after-token, ",")`;
    consider-recommendation (#recommendation = $recommendation);
  } else {
    apply [.] mode="copy";
  }
}

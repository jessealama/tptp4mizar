stylesheet "1.0";
include "../tptp/tptp2wsx.xsl";
output method="xml" indent="yes";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

// Should be either "flat" or "nested"
#shape = { ""; }

//////////////////////////////////////////////////////////////////////
// Keys
//////////////////////////////////////////////////////////////////////

key "axiom" [formula[@name and @status = "axiom"]] `@name`;
key "formulas" [formula[@name]] `@name`;

//////////////////////////////////////////////////////////////////////
// Utilities
//////////////////////////////////////////////////////////////////////

tpl [*] mode="trace" {
  $n = `name (.)`;
  $position = `count (preceding-sibling::*[name() = $n]) + 1`;
  if [parent::*] {
    apply [..] mode="trace";
  }
  $step = `concat ($n, "[", $position, "]")`;
  msg $step;
}

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

// If we don't handle something explicitly, we don't handle it at all.
tpl [*] {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node.")`;
  apply [.] mode="trace";
  msg terminate="yes" $message;
}

tpl [*] mode="no-justification" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in no-justification mode.")`;
  apply [.] mode="trace";
  msg terminate="yes" $message;
}

tpl [*] mode="negate-conjecture" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in negate-conjecture mode.")`;
  apply [.] mode="trace";
  msg terminate="yes" $message;
}

tpl [*] mode="axiom" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in axiom mode.")`;
  apply [.] mode="trace";
  msg terminate="yes" $message;
}

tpl [*] mode="lemma" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in lemma mode.")`;
  apply [.] mode="trace";
  msg terminate="yes" $message;
}

tpl [*] mode="conjecture" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in conjecture mode.")`;
  apply [.] mode="trace";
  msg terminate="yes" $message;
}

tpl [*] mode="full" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in full mode.")`;
  apply [.] mode="trace";
  msg terminate="yes" $message;
}

//////////////////////////////////////////////////////////////////////
// Business as usual
//////////////////////////////////////////////////////////////////////

tpl any-depends-on-conjecture (#formula-names) {
  if [$formula-names] {
    $formula-name = `$formula-names[1]`;
    if [key ("formulas", $formula-name)] {
      for-each [key ("formulas", $formula-name)] {
        $depends = depends-on-conjecture ();
        if [$depends = "1"] {
          "1";
        } else {
          any-depends-on-conjecture (#formula-names = `$formula-names[position() > 1]`);
        }
      }
    } else {
      $message = `concat ("Error: unknown formula '", $formula-name, "'.")`;
      apply [.] mode="trace";
      msg terminate="yes" $message;
    }
  } else {
    "0";
  }
}

tpl depends-on-conjecture {
  if [self::formula[@status = "conjecture"]] {
    "1";
  } else {
    for-each [source] {
      if [non-logical-data[@name = "inference"]] {
        for-each [non-logical-data[@name = "inference"]] {
          for-each [non-logical-data[position() = last()]] {
            any-depends-on-conjecture (#formula-names = `number[@name]/@name`);
          }
        }
      } else {
        "0";
      }
    }
  }
}

tpl [formula[@name]] mode="axiom" {
  $n = `@name`;
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        @spelling = `@name`;
      }
      apply [*[1]] mode="strip-universal-prefix";
    }
    <Straightforward-Justification {
      <Theorem-Reference {
        $article-uc = uc (#s = $article);
        @spelling = $article-uc;
        @"number" = `count (preceding::formula[@status = "axiom"]) + 1`;
      }
    }
  }
}

tpl [*] mode="reiterate" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in reiterate mode.")`;
  apply [.] mode="trace";
  msg terminate="yes" $message;
}

tpl [formula] mode="reiterate" {
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      apply [*[1]] mode="strip-universal-prefix";
    }
    <Straightforward-Justification {
      if [@status = "axiom"] {
        $safe-name = capitalize-after-underscore (#string = `@name`);
        $padded = pad-axiom (#string = $safe-name);
        @spelling = $padded;
      } else {
        <Local-Reference {
          @spelling = `@name`;
        }
      }
    }
  }
}

tpl [formula[@name and source/non-logical-data[@name = "inference"]]] mode="lemma" {
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        @spelling = `@name`;
      }
      apply [*[1]] mode="strip-universal-prefix";
    }
    <Straightforward-Justification {
      for-each [source] {
        for-each [non-logical-data[@name = "inference"]] {
          for-each [non-logical-data[position() = last()]] {
            for-each [number[@name]] {
              $n = `@name`;
              <Local-Reference {
                if [key ("axiom", $n)] {
                  for-each [key ("axiom", $n)] {
                    for-each [source] {
                      for-each [non-logical-data[@name = "file"]] {
                        for-each [non-logical-data[position() = last()]] {
                          $safe-name = capitalize-after-underscore (#string = `@name`);
                          $padded = pad-axiom (#string = $safe-name);
                          @spelling = $padded;
                        }
                      }
                    }
                  }
                } else {
                  $safe-name = capitalize-after-underscore (#string = `@name`);
                  // $step-name = `concat ("Step", $safe-name)`;
                  @spelling = $safe-name;
                }
              }
            }
          }
          if [non-logical-data[@name = "skolemize"]] {
            <Definition-Reference {
              @spelling = "SKOLEM";
              @"number" = `count (preceding::formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "skolemize"]]) + 1`;
            }
          }
        }
      }
    }
  }
}

tpl [formula] mode="conjecture" {
  <Item {
    @kind = "Theorem-Item";
    <Proposition {
      apply [*[1]]; // render the formula
    }
    <Block {
      @kind = "Proof";
      <Block {
        @kind = "Now-Reasoning";
        <Item {
          @kind = "Assumption";
          <Single-Assumption {
            apply [following-sibling::formula[@status = "negated_conjecture"][1]] mode="no-justification";
          }
        }
        for-each [following-sibling::formula[not(@status = "axiom") and source/non-logical-data[@name = "inference"]]] {
          choose {
            when [@status = "negated_conjecture" and not(preceding-sibling::formula[@status = "negated_conjecture"])] {
              // ignore; we just dealt with this particular formula
            }
            when [position() = last()] {
              apply [.] mode="conclusion";
            }
            otherwise {
              $depends = depends-on-conjecture ();
              if [$depends = "1"] {
                apply [.] mode="full";
              }
            }
          }
        }
      }
      <Item {
        @kind = "Conclusion";
        @shape = "Compact-Statement";
        <Proposition {
          <Thesis;
        }
        <Straightforward-Justification {
          <Link;
        }
      }
    }
  }
}

tpl [formula[@name and not(@name = "")]] mode="no-justification" {
  <Proposition {
    <Label {
      $safe-name = capitalize-after-underscore (#string = `@name`);
      // $step-name = `concat ("Step", $safe-name)`;
      @spelling = $safe-name;
    }
    apply [*[1]];
  }
}

tpl [formula[@name and not(@name = "")]] mode="no-label" {
  <Proposition {
    apply [*[1]];
  }
}

tpl [formula[@name and not(@name = "")]] mode="conclusion" {
  <Item {
    @kind = "Conclusion";
    @shape = "Compact-Statement";
    <Proposition {
      apply [*[1]];
    }
    <Straightforward-Justification {
      for-each [source] {
        choose {
          when [number[@name]] {
            for-each [number[@name]] {
              $n = `@name`;
              <Local-Reference {
                if [key ("axiom", $n)] {
                  for-each [key ("axiom", $n)] {
                    for-each [source] {
                      for-each [non-logical-data[@name = "file"]] {
                        for-each [non-logical-data[position() = last()]] {
                          $safe-name = capitalize-after-underscore (#string = `@name`);
                          $padded = pad-axiom (#string = $safe-name);
                          @spelling = $padded;
                        }
                      }
                    }
                  }
                } else {
                  $safe-name = capitalize-after-underscore (#string = $n);
                  // $step-name = `concat ("Step", $safe-name)`;
                  @spelling = $safe-name;
                }
              }
            }
          }
          when [non-logical-data[@name = "inference"]] {
            for-each [non-logical-data[@name = "inference"]] {
              for-each [non-logical-data[position() = last()]] {
                for-each [number[@name]] {
                  <Local-Reference {
                    $n = `@name`;
                    if [key ("axiom", $n)] {
                      for-each [key ("axiom", $n)] {
                        for-each [source] {
                          for-each [non-logical-data[@name = "file"]] {
                            for-each [non-logical-data[position() = last()]] {
                              $safe-name = capitalize-after-underscore (#string = `@name`);
                              $padded = pad-axiom (#string = $safe-name);
                              @spelling = $padded;
                            }
                          }
                        }
                      }
                    } else {
                      $safe-name = capitalize-after-underscore (#string = $n);
                      // $step-name = `concat ("Step", $safe-name)`;
                      @spelling = $safe-name;
                    }
                  }
                }
              }
              if [non-logical-data[@name = "skolemize"]] {
                <Definition-Reference {
                  @spelling = "SKOLEM";
                  @"number" = `count (preceding::formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "skolemize"]]) + 1`;
                }
              }
            }
          }
          otherwise {
            apply [.] mode="trace";
            msg terminate="yes" "Error: Unable to figure out how to deal with the justification of a formula";
          }
        }
      }
    }
  }
}



tpl [formula[@name and not(@name = "")]] mode="full" {
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        $safe-name = capitalize-after-underscore (#string = `@name`);
        // $step-name = `concat ("Step", $safe-name)`;
        @spelling = $safe-name;
      }
      apply [*[1]] mode="strip-universal-prefix";
    }
    <Straightforward-Justification {
      for-each [source] {
        choose {
          when [number[@name]] {
            for-each [number[@name]] {
              $n = `@name`;
              <Local-Reference {
                if [key ("axiom", $n)] {
                  for-each [key ("axiom", $n)] {
                    for-each [source] {
                      for-each [non-logical-data[@name = "file"]] {
                        for-each [non-logical-data[position() = last()]] {
                          $safe-name = capitalize-after-underscore (#string = `@name`);
                          $padded = pad-axiom (#string = $safe-name);
                          @spelling = $padded;
                        }
                      }
                    }
                  }
                } else {
                  $safe-name = capitalize-after-underscore (#string = $n);
                  // $step-name = `concat ("Step", $safe-name)`;
                  @spelling = $safe-name;
                }
              }
            }
          }
          when [non-logical-data[@name = "inference"]] {
            for-each [non-logical-data[@name = "inference"]] {
              for-each [non-logical-data[position() = last()]] {
                for-each [number[@name]] {
                  <Local-Reference {
                    $n = `@name`;
                    if [key ("axiom", $n)] {
                      for-each [key ("axiom", $n)] {
                        for-each [source] {
                          for-each [non-logical-data[@name = "file"]] {
                            for-each [non-logical-data[position() = last()]] {
                              $safe-name = capitalize-after-underscore (#string = `@name`);
                              $padded = pad-axiom (#string = $safe-name);
                              @spelling = $padded;
                            }
                          }
                        }
                      }
                    } else {
                      $safe-name = capitalize-after-underscore (#string = $n);
                      // $step-name = `concat ("Step", $safe-name)`;
                      @spelling = $safe-name;
                    }
                  }
                }
              }
              if [non-logical-data[@name = "skolemize"]] {
                <Definition-Reference {
                  @spelling = "SKOLEM";
                  @"number" = `count (preceding::formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "skolemize"]]) + 1`;
                }
              }
            }
          }
          otherwise {
            apply [.] mode="trace";
            msg terminate="yes" "Error: Unable to figure out how to deal with the justification of a formula";
          }
        }
      }
    }
  }
}

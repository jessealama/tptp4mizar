stylesheet "1.0";
output method="xml" indent="yes";

//////////////////////////////////////////////////////////////////////
// Keys
//////////////////////////////////////////////////////////////////////

key "non-axioms" [formula[@name and not(@status = "axiom")]] `@name`;
key "axioms" [formula[@name and @status = "axiom"]] `@name`;

//////////////////////////////////////////////////////////////////////
// Utilities
//////////////////////////////////////////////////////////////////////

tpl [*] mode="trace" {
  $n = `name (.)`;
  $position = `count (preceding-sibling::*[name() = $n]) + 1`;
  if [parent::*] {
    apply [..] mode="trace";
  }
  $step = `concat ($n, "[", $position, "]")`;
  msg $step;
}

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [*] mode="copy" {
  $n = `name (.)`;
  <$n {
    for-each [@*] { copy-of `.`; }
    apply [*] mode="copy";
  }
}

// If we don't handle something explicitly, we don't handle it at all.
tpl [*] {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node.")`;
  apply [.] mode="trace";
  msg terminate="yes" $message;
}

tpl [/] {
  if [tstp] {
    apply [tstp];
  } else {
    msg terminate="yes" "Error: the required tstp document element is missing.";
  }
}

tpl [tstp] {
  <tstp {
    for-each [@*] { copy-of `.`; }
    apply [formula];
  }
}

tpl [formula[not(source)]] {
  msg terminate="yes" "Error: we encountered a formula without a source.  Is this stylesheet being applied to a TPTP derivation?";
}

tpl [formula[@status = "axiom" and source]] {
  $pos = `count (preceding-sibling::formula[@status = "axiom"]) + 1`;
  <formula {
    for-each [@*] { copy-of `.`; }
    @"name" = `concat ("ax", $pos)`;
    apply [*[1]] mode="copy";
    apply [source];
  }
}

tpl [formula[not(@status = "axiom") and source]] {
  $pos = `count (preceding-sibling::formula[not(@status = "axiom")]) + 1`;
  <formula {
    for-each [@*] { copy-of `.`; }
    @"name" = `concat ("step", $pos)`;
    apply [*[1]] mode="copy";
    apply [source];
  }
}

tpl [source[ancestor::formula[@status = "axiom"]]] {
  <source;
}

tpl [source[ancestor::formula[not(@status = "axiom")]]] {
  <source {
    <non-logical-data {
      for-each [non-logical-data] {
        for-each [@*] { copy-of `.`; }
        for-each [non-logical-data[position() < last()]] {
          apply [.] mode="copy";
        }
        for-each [non-logical-data[position() = last()]] {
          <non-logical-data {
            for-each [*[@name]] {
              $n = `@name`;
              choose {
                when [key ("axioms", $n)] {
                  for-each [key ("axioms", $n)] {
                    <non-logical-data {
                      $other-position = `count (preceding-sibling::formula[@status = "axiom"]) + 1`;
                      @"name" = `concat ("ax", $other-position)`;
                    }
                  }
                }
                when [key ("non-axioms", $n)] {
                  for-each [key ("non-axioms", $n)] {
                    <non-logical-data {
                      $other-position = `count (preceding-sibling::formula[not(@status = "axiom")]) + 1`;
                      @"name" = `concat ("step", $other-position)`;
                    }
                  }
                }
                otherwise {
                  $message = `concat ("Warning: unknown formula '", $n, "'.")`;
                  msg terminate="no" $message;
                }
              }
            }
          }
        }
      }
    }
  }
}

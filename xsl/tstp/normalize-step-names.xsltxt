stylesheet "1.0";
include "../utils/trace.xsl";
include "../utils/copy.xsl";
output method="xml" indent="yes";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

#axiom-prefix = { "ax"; }

#step-prefix = { "step"; }

//////////////////////////////////////////////////////////////////////
// Keys
//////////////////////////////////////////////////////////////////////

key "non-axioms" [formula[not(@status = "axiom")]] `@name`;
key "axioms" [formula[@status = "axiom"]] `@name`;

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

// If we don't handle something explicitly, we don't handle it at all.
tpl [*] {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node.")`;
  apply [.] mode="trace";
  msg terminate="yes" $message;
}

tpl [/] {
  if [tstp] {
    apply [tstp];
  } else {
    msg terminate="yes" "Error: the required tstp document element is missing.";
  }
}

tpl [tstp] {
  <tstp {
    for-each [@*] { copy-of `.`; }
    apply [formula];
  }
}

tpl [formula[not(source)]] {
  $pos = `count (preceding-sibling::formula[@status = "axiom"]) + 1`;
  <formula {
    for-each [@*] { copy-of `.`; }
    @"name" = `concat ($axiom-prefix, $pos)`;
    apply [*[1]] mode="copy";
  }
}

tpl [formula[@status = "axiom" and source]] {
  $pos = `count (preceding-sibling::formula[@status = "axiom"]) + 1`;
  <formula {
    for-each [@*] { copy-of `.`; }
    @"name" = `concat ($axiom-prefix, $pos)`;
    apply [*[1]] mode="copy";
    apply [source];
    if [useful-info] {
      apply [useful-info] mode="copy";
    }
  }
}

tpl [formula[not(@status = "axiom") and source]] {
  $pos = `count (preceding-sibling::formula[not(@status = "axiom")]) + 1`;
  <formula {
    for-each [@*] { copy-of `.`; }
    @"name" = `concat ($step-prefix, $pos)`;
    apply [*[1]] mode="copy";
    apply [source];
    if [useful-info] {
      apply [useful-info] mode="copy";
    }
  }
}

tpl [formula[@status = "negated_conjecture"]] {
  $pos = `count (preceding-sibling::formula[not(@status = "axiom")]) + 1`;
  <formula {
    for-each [@*] { copy-of `.`; }
    @"name" = `concat ($step-prefix, $pos)`;
    apply [*[1]] mode="copy";
    if [source] {
      apply [source];
    }
    if [useful-info] {
      apply [useful-info] mode="copy";
    }
  }
}

tpl [formula[@status = "conjecture"]] {
  <formula {
    for-each [@*] { copy-of `.`; }
    @"name" = "goal";
    apply [*[1]] mode="copy";
    if [source] {
      apply [source];
    }
    if [useful-info] {
      apply [useful-info] mode="copy";
    }
  }
}

tpl [*] mode="maybe-rewrite" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in maybe-rewrite mode.")`;
  apply [.] mode="trace";
  msg terminate="yes" $message;
}

tpl [non-logical-data[@name]] mode="maybe-rewrite" {
  $n = `@name`;
  $nld = `.`;
  choose {
    when [key ("axioms", $n)] {
      for-each [key ("axioms", $n)] {
        <non-logical-data {
          $other-position = `count (preceding-sibling::formula[@status = "axiom"]) + 1`;
          @"name" = `concat ($axiom-prefix, $other-position)`;
          for-each [$nld] {
            apply [*] mode="maybe-rewrite";
          }
        }
      }
    }
    when [key ("non-axioms", $n)] {
      for-each [key ("non-axioms", $n)] {
        <non-logical-data {
          $other-position = `count (preceding-sibling::formula[not(@status = "axiom")]) + 1`;
          @"name" = `concat ($step-prefix, $other-position)`;
          for-each [$nld] {
            apply [*] mode="maybe-rewrite";
          }
        }
      }
    }
    otherwise {
      $message = `concat ("Warning: unknown formula '", $n, "'.")`;
      msg terminate="no" $message;
      <non-logical-data {
        for-each [@*] { copy-of `.`; }
        apply [*] mode="maybe-rewrite";
      }
    }
  }
}

tpl [number[@name]] mode="maybe-rewrite" {
  $n = `@name`;
  choose {
    when [key ("axioms", $n)] {
      for-each [key ("axioms", $n)] {
        <non-logical-data {
          $other-position = `count (preceding-sibling::formula[@status = "axiom"]) + 1`;
          @"name" = `concat ($axiom-prefix, $other-position)`;
        }
      }
    }
    when [key ("non-axioms", $n)] {
      for-each [key ("non-axioms", $n)] {
        <non-logical-data {
          $other-position = `count (preceding-sibling::formula[not(@status = "axiom")]) + 1`;
          @"name" = `concat ($step-prefix, $other-position)`;
        }
      }
    }
    otherwise {
      $message = `concat ("Warning: unknown formula '", $n, "'.")`;
      msg terminate="no" $message;
    }
  }
}

tpl [non-logical-data[not(@name)]] mode="maybe-rewrite" {
  <non-logical-data {
    apply [*] mode="maybe-rewrite";
  }
}

tpl [source] {
  <source {
    for-each [*] {
      apply [.] mode="maybe-rewrite";
    }
  }
}

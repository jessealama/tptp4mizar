stylesheet "1.0";
include "../tptp/tptp2dno.xsl";
output method="xml" indent="yes";
output omit-xml-declaration="no";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

#original = { ""; }

#background-article-name = { ""; }

#background-tptp-xml = { ""; }

//////////////////////////////////////////////////////////////////////
// Utilities
//////////////////////////////////////////////////////////////////////

tpl arg-types {
  <ArgTypes {
    for-each [*] {
      set ();
    }
  }
}

tpl visible {
  <Visible {
    for-each [*] {
      <Int {
        @x = `position()`;
      }
    }
  }
}

tpl count-new-predicates (#candidates) {
  if [$candidates] {
    $candidate = `$candidates[1]`;
    $candidate-name = `$candidate/@name`;
    $count-rest = count-new-predicates (#candidates = `$candidates[position() > 1]`);
    for-each [document ($background-tptp-xml, /tstp)] {
      if [descendant::predicate[@name = $candidate-name]] {
        `$count-rest`;
      } else {
        `$count-rest + 1`;
      }
    }
  } else {
    "0";
  }
}

tpl count-new-functions (#candidates) {
  if [$candidates] {
    $candidate = `$candidates[1]`;
    $candidate-name = `$candidate/@name`;
    $count-rest = count-new-predicates (#candidates = `$candidates[position() > 1]`);
    for-each [document ($background-tptp-xml, /tstp)] {
      if [descendant::function[@name = $candidate-name]] {
        `$count-rest`;
      } else {
        `$count-rest + 1`;
      }
    }
  } else {
    "0";
  }
}

tpl count-predicates {
  `count (descendant::predicate[@name and not(@name = "=") and not(@name = preceding::predicate[@name]/@name)])`;
}

tpl count-old-predicates  {
  for-each [document ($background-tptp-xml, /tstp)] {
    count-predicates ();
  }
}

tpl count-functions {
  `count(descendant::function[not(@name = preceding::function/@name)
                              and not(@name = ancestor::function/@name)])`;
}

tpl count-old-functions  {
  for-each [document ($background-tptp-xml, /tstp)] {
    count-functions ();
  }
}

tpl position-of-new-function-1 (#function-name, #candidates) {
  if [$candidates] {
    $candidate = `$candidates[1]`;
    $candidate-name = `$candidate/@name`;
    for-each [document ($background-tptp-xml, /tstp)] {
      if [descendant::function[@name = $candidate-name]] {
        position-of-new-function-1 (#function-name = $function-name,
				    #candidates = `$candidates[position() > 1]`);
      } else {
        $pos-previous = position-of-new-function-1 (#function-name = $function-name,
				                    #candidates = `$candidates[position() > 1]`);
        `$pos-previous + 1`;
      }
    }
  } else {
    "1";
  }
}

tpl position-of-new-function (#function-name) {
  position-of-new-function-1 (#function-name = $function-name,
                              #candidates = `preceding::function[not(@name = preceding::function/@name | ancestor::function/@name)]`);
}

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [tstp] {

  $article-uc = uc (#s = `$article`);
  $original-uc = uc (#s = $original);
  $article-with-suffix = `concat ($article-uc, "_E")`;
  $original-with-suffix = `concat ($original-uc, "_E")`;

  $num-predicates
    = `count(descendant::predicate[not(@name = "=")
                                   and not(@name = preceding::predicate/@name)])`;
  $num-functions
    = `count(descendant::function[not(@name = preceding::function/@name)
                                  and not(@name = ancestor::function/@name)])`;

  <Notations {

    <Signature {
      <ArticleID { @"name" = "HIDDEN"; }
      <ArticleID { @"name" = $article-with-suffix; }
    }


    <Vocabularies {

      <Vocabulary {
        <ArticleID { @"name" = `$article-uc`; }

        // we don't handle these kinds of symbols (yet)
        <SymbolCount { @kind = "U"; @nr = "0"; }
        <SymbolCount { @kind = "V"; @nr = "0"; }
        <SymbolCount { @kind = "G"; @nr = "0"; }
        <SymbolCount { @kind = "K"; @nr = "0"; }
        <SymbolCount { @kind = "L"; @nr = "0"; }
        <SymbolCount { @kind = "M"; @nr = "0"; }

        if [$background-article-name = ""] {
          <SymbolCount {
            @kind = "O";
            @nr = $num-functions;
          }

          <SymbolCount {
            @kind = "R";
            @nr = $num-predicates;
          }
        } else {
          $num-new-predicates = count-new-predicates (#candidates = `descendant::predicate[@name and not(@name = "=") and not(@name = preceding::predicate[@name]/@name)]`);
          $num-new-functions = count-new-functions (#candidates = `descendant::function[@name and not(@name = preceding::function[@name]/@name) and not(@name = ancestor::function[@name]/@name)]`);

          <SymbolCount {
            @kind = "O";
            @nr = $num-new-functions;
          }

          <SymbolCount {
            @kind = "R";
            @nr = $num-new-predicates;
          }

        }

      }
    }

    if [$background-article-name = ""] {
      for-each [descendant::predicate[not(@name = "=")
                                      and not(@name = preceding::predicate/@name)]] {
        apply [.] (#nr = `position ()`,
                   #constrnr = `position() + 2`,
                   #aid = $article-uc);
      }
    }

    for-each [descendant::function[not(@name = preceding::function/@name)
                                   and not(@name = ancestor::function/@name)]] {
      if [$background-article-name = ""] {
        apply [.] (#aid = $article-uc,
                   #nr = `position ()`,
                   #constrnr = `position ()`);
      } else {
        $n = `@name`;
        $function = `.`;
        for-each [document ($background-tptp-xml, /tstp)] {
          if [descendant::function[@name = $n]] {
            // ignore
          } else {
            for-each [$function] {
              $nr = position-of-new-function (#function-name = $n);
              apply [.] (#aid = $article-uc,
                         #nr = $nr,
                         #constrnr = $nr);
            }
          }
        }
      }
    }
  }
}

tpl [function] (#nr, #constrnr, #aid) {
  $n = `@name`;
  $function = `.`;
  <Pattern {
    @kind = "K";
    @nr = $nr;
    @aid = $aid;
    @constrkind = "K";
    @constrnr = $constrnr;
    <Format {
      @kind = "O";
      @symbolnr = $nr;
      @argnr = `count (*)`;
      @leftargnr = "0";
      @spelling = `@name`;
    }
    arg-types ();
    visible ();
  }
}

tpl [predicate] (#nr, #constrnr, #aid) {
  $n = `@name`;
  $predicate = `.`;
  <Pattern {
    @kind = "R";
    @nr = $nr;
    @aid = $aid;
    @constrkind = "R";
    @constrnr = $constrnr;
    <Format {
      @kind = "R";
      @symbolnr = $nr;
      @argnr = `count (*)`;
      @leftargnr = "0";
      @spelling = `@name`;
    }
    arg-types ();
    visible ();
  }
}

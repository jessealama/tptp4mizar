stylesheet "1.0";
include "../tptp/tptp2dno.xsl";
output method="xml" indent="yes";
output omit-xml-declaration="no";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

#original = { ""; }

//////////////////////////////////////////////////////////////////////
// Utilities
//////////////////////////////////////////////////////////////////////

tpl arg-types {
  <ArgTypes {
    for-each [*] {
      set ();
    }
  }
}

tpl visible {
  <Visible {
    for-each [*] {
      <Int {
        @x = `position()`;
      }
    }
  }
}

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [tstp] {

  $article-uc = uc (#s = `$article`);
  $original-uc = uc (#s = $original);
  $article-with-suffix = `concat ($article-uc, "_E")`;
  $original-with-suffix = `concat ($original-uc, "_E")`;

  $num-predicates
    = `count(descendant::predicate[not(@name = "=")
                                   and not(@name = preceding::predicate/@name)])`;
  $num-functions
    = `count(descendant::function[not(@name = preceding::function/@name)
                                  and not(@name = ancestor::function/@name)])`;

  <Notations {

    <Signature {
      <ArticleID { @"name" = "HIDDEN"; }
      <ArticleID { @"name" = $article-with-suffix; }
    }


    <Vocabularies {

      <Vocabulary {
        <ArticleID { @"name" = `$article-uc`; }

        // we don't handle these kinds of symbols (yet)
        <SymbolCount { @kind = "U"; @nr = "0"; }
        <SymbolCount { @kind = "V"; @nr = "0"; }
        <SymbolCount { @kind = "G"; @nr = "0"; }
        <SymbolCount { @kind = "K"; @nr = "0"; }
        <SymbolCount { @kind = "L"; @nr = "0"; }
        <SymbolCount { @kind = "M"; @nr = "0"; }

        <SymbolCount {
          @kind = "O";
          @nr = $num-functions;
        }

        <SymbolCount {
          @kind = "R";
          @nr = $num-predicates;
        }

      }
    }

    for-each [descendant::predicate[not(@name = "=")
                                    and not(@name = preceding::predicate/@name)]] {
      apply [.] (#nr = `position ()`,
                 #constrnr = `position() + 2`,
                 #aid = $article-uc);
    }

    for-each [descendant::function[not(@name = preceding::function/@name)
                                   and not(@name = ancestor::function/@name)]] {
      apply [.] (#aid = $article-uc,
               #nr = `position ()`,
               #constrnr = `position ()`);
    }
  }
}

tpl [function] (#nr, #constrnr, #aid) {
  <Pattern {
    @kind = "K";
    @nr = $nr;
    @aid = $aid;
    @constrkind = "K";
    @constrnr = $constrnr;
    <Format {
      @kind = "O";
      @symbolnr = $nr;
      @argnr = `count (*)`;
      @leftargnr = "0";
      @spelling = `@name`;
    }
    arg-types ();
    visible ();
  }
}

tpl [predicate] (#nr, #constrnr, #aid) {
  <Pattern {
    @kind = "R";
    @nr = $nr;
    @aid = $aid;
    @constrkind = "R";
    @constrnr = $constrnr;
    <Format {
      @kind = "R";
      @symbolnr = $nr;
      @argnr = `count (*)`;
      @leftargnr = "0";
      @spelling = `@name`;
    }
    arg-types ();
    visible ();
  }
}

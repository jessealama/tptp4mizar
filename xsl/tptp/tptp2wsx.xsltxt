stylesheet "1.0";
include "../utils/strings.xsl";
include "tptp-formulas.xsl";
output method="xml" indent="yes";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

#article = { ""; }

//////////////////////////////////////////////////////////////////////
// Utilities
//////////////////////////////////////////////////////////////////////

tpl pad-axiom (#string) {
  // `concat ("Ax", $string)`;
  `$string`;
}

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [/] {
  choose {
    when [$article = ""] {
      msg terminate="yes" "Error: the empty string is not an acceptable value for the article stylesheet parameter.";
    }
    when [string-length ($article) > 8] {
      msg terminate="yes" "Error: the value of the article stylesheet parameter is too long (it must be at most 8 characters).";
    }
    when [contains ($article, " ")] {
      msg terminate="yes" "Error: the value of the article stylesheet parameter contains whitespace.";
    }
    when [$shape = ""] {
      msg terminate="yes" "Error: a non-empty value for the shape stylesheet parameter is mandatory.";
    }
    when [not($shape = "flat") and not($shape = "nested")] {
      msg terminate="yes" "Error: the only permitted values of the shape stylesheet parameter are 'flat' and 'nested'.";
    }
    when [tstp] {
      apply [tstp];
    }
    otherwise {
      msg terminate="yes" "Error: the required tstp document element is missing.";
    }
  }
}

tpl reserve-variables {
  if [descendant::variable] {
    <Item {
      @kind = "Reservation";
      <Variables {
        for-each [descendant::variable[@name and not(@name = preceding::variable[@name]/@name)]] {
          <Variable {
            @spelling = `@name`;
          }
        }
      }
      <Standard-Type {
        @spelling = "set";
      }
    }
  }
}

tpl [formula[@name]] mode="axiom" {
  $n = `@name`;
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        $safe-name = capitalize-after-underscore (#string = `@name`);
        $padded = pad-axiom (#string = $safe-name);
        @spelling = $padded;
      }
      apply [*[1]] mode="strip-universal-prefix";
    }
    <Straightforward-Justification;
  }
}

tpl [tstp] {
  $aid-uc = uc (#s = $article);
  <Text-Proper {
    @articleid = $aid-uc;
    <Item { @kind = "Section-Pragma"; }
    reserve-variables ();
    for-each [formula] {
      apply [.] mode="axiom";
    }
  }
}

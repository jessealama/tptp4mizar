stylesheet "1.0";
include "../tstp/tstp2wsx.xsl";
output method="xml" indent="yes";

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [tstp] {
  $aid-uc = uc (#s = $article);
  <Text-Proper {
    @articleid = $aid-uc;
    <Item { @kind = "Section-Pragma"; }
    reserve-variables ();
    for-each [formula[@status = "axiom"]] {
      apply [.] mode="axiom";
    }
    <Item {
      @kind = "Regular-Statement";
      @shape = "Diffuse-Statement";
      <Label {
        @spelling = "Refutation";
      }
      <Block {
        @kind = "Now-Reasoning";
        for-each [formula[@status = "negated_conjecture"]] {
          apply [.] mode="assumption";
        }
        for-each [formula[not(@status = "axiom")
                          and not(@status = "conjecture")
                          and not(@status = "negated_conjecture")]] {
          apply [.] mode="lemma";
        }
        <Item {
          @kind = "Conclusion";
          @shape = "Compact-Statement";
          <Proposition {
            <Contradiction;
          }
          <Straightforward-Justification {
            <Link;
          }
        }
      }
    }
    <Item {
      @kind = "Theorem-Item";
      <Proposition {
        for-each [formula[@status = "conjecture"]] {
          apply [*[1]];
        }
      }
      <Straightforward-Justification {
        <Local-Reference {
          @spelling = "Refutation";
        }
      }
    }
  }
}

tpl [formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "clausify"]]] mode="lemma" {
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        @spelling = `@name`;
      }
      apply [*[1]];
    }
    <Straightforward-Justification {
      // reference for this formula
      apply [source];
      // clausification axiom
      <Definition-Reference {
        $article-uc = uc (#s = $article);
        $article-with-prefix = `concat ($article-uc, "_E")`;
        @spelling = $article-with-prefix;
        @"number" = `count (preceding::formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "clausify"]]) + 1`;
      }
    }
  }
}

tpl [formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "resolve"]]] mode="lemma" {
  $formula = `.`;
  $formula-name = `@name`;
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        @spelling = $formula-name;
      }
      apply [*[1]];
    }
    <Block {
      @kind = "Proof";
      for-each [*[1]] {
        for-each [self::quantifier[@type = "universal"]/variable | descendant::quantifier[@type = "universal"]/variable] {
          <Item {
            @kind = "Generalization";
            <Implicitly-Qualified-Segment {
              <Variable {
                @spelling = `@name`;
              }
            }
          }
        }
      }
      // Grab the first premise, then conclude from the second
      for-each [source] {
        for-each [non-logical-data[@name = "inference"]] {
          for-each [non-logical-data[position() = last()]] {
            if [non-logical-data[3]] {
              apply [.] (#message = "We found a resolution step that refers to more than 2 formulas.") mode="die";
            }
            if [not(non-logical-data[2])] {
              apply [.] (#message = "We found a resolution step that refers to fewer than 2 formulas.") mode="die";
            }
            for-each [non-logical-data] {
              $premise-name = `@name`;
              choose {
                when [position() = 1] {
                  if [not(key ("formulas", $premise-name))] {
                    $message = `concat ("Error: unable to find the premise '", $premise-name, "'.")`;
                    apply [.] (#message = $message) mode="die";
                  }
                  for-each [key ("formulas", $premise-name)] {
                    <Item {
                      @kind = "Regular-Statement";
                      @shape = "Compact-Statement";
                      // stripping the entire universal prefix may not be safe...
                      <Proposition {
                        apply [*[1]] mode="strip-universal-prefix";
                      }
                      <Straightforward-Justification {
                        <Local-Reference {
                          @spelling = $premise-name;
                        }
                      }
                    }
                  }
                }
                when [position() = 2] {
                  <Item {
                    @kind = "Conclusion";
                    @shape = "Compact-Statement";
                    <Proposition {
                      <Thesis;
                    }
                    <Straightforward-Justification {
                      <Link;
                      <Local-Reference {
                        @spelling = $premise-name;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

stylesheet "1.0";
include "../utils/strings.xsl";
include "../utils/token-strings.xsl";
include "../utils/die.xsl";
output method="xml" indent="yes";
output omit-xml-declaration="no";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

// The name of the article .def that we will create
#article = { ""; }

// The directory in which we will look for the dco file
#prel-directory = { ""; }

// Generate only skolem "definitions"
#only-skolems = { ""; }

// If '1', ignore all skolem functions
#no-skolems = { ""; }

#skolem-prefix = { "esk"; }

// Name of a dco file (sans extension) in which we shall look for
// other functions and predicates.
#reference-dco = { ""; }

// Where we can find skolem functions
#skolem-dco = { ""; }

//////////////////////////////////////////////////////////////////////
// Keys
//////////////////////////////////////////////////////////////////////

key "formulas" [formula[@name]] `@name`;

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [/] {
  choose {
    when [$article = ""] {
      apply [.] (#message = "Error: a value for the article stylesheet parameter was not supplied (or the empty string was supplied).") mode="die";
    }
    when [not(tstp)] {
      apply [.] (#message = "Error: this does not appear to be a TSTP XML document, because it lacks a 'tstp' root element.") mode="die";
    }
    when [tstp[2]] {
      apply [.] (#message = "Error: this does not appear to be a TSTP XML document, because it has multiple 'tstp' root elements.") mode="die";
    }
    otherwise {
      apply [tstp];
    }
  }
}

tpl [tstp] {
  $article-uc = uc (#s = `$article`);
  $reference-dco-uc = uc (#s = `$reference-dco`);
  <Theorems {
    <Signature {
      <ArticleID {
        @"name" = "HIDDEN";
      }
      if [not($reference-dco = "")] {
        <ArticleID {
          @"name" = $reference-dco-uc;
        }
      }
      <ArticleID {
        @"name" = $article-uc;
      }
    }

    if [not($only-skolems = "1")] {
      // Generate the axioms
      for-each [formula[@status = "axiom"]] {
        <Theorem {
          @kind = "T";
          apply [.] (#variable-alist = ",,") mode="render-definiens";
        }
      }
    }

    if [not($no-skolems = "1")] {
      $num-skolem-functions
        = `count(descendant::function[starts-with (@name, $skolem-prefix)
                                      and not(@name = preceding::function/@name)
                                      and not(@name = ancestor::function/@name)])`;
      for-each [formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "skolemize"]]] {
        $this-formula-name = `@name`;
        <Theorem {
          @kind = "D";
          @constrkind = "K";
          @constrnr = `position()`;
          <Not {
            <And {
              for-each [source] {
                for-each [non-logical-data[@name = "inference"]] {
                  for-each [non-logical-data[position() = last()]] {
                    for-each [non-logical-data[@name and not(*)] | number[@name]] {
                      $other-formula-name = `@name`;
                      if [key ("formulas", $other-formula-name)] {
                        for-each [key ("formulas", $other-formula-name)] {
                          apply [*[1]] (#variable-alist = ",,") mode="render-definiens";
                        }
                      } else {
                        $message = `concat ("Error: formula ", $this-formula-name, " depends on formula ", $other-formula-name, ", but there appears to be no such formula.")`;
                        apply [.] (#message = $message) mode="die";
                      }
                    }
                  }
                }
              }
              <Not {
                apply [.] (#variable-alist = ",,") mode="render-definiens";
              }
            }
          }
        }
      }
    }
  }
}

tpl [*] (#variable-alist) mode="render-definiens" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in render-definiens mode.")`;
  apply [.] (#message = $message) mode="die";
}

tpl [formula] (#variable-alist) mode="render-definiens" {
  for-each [*[1]] { // the formula proper of the TPTP formula
    apply [.] (#variable-alist = $variable-alist) mode="render-definiens";
  }
}

tpl [quantifier[@type = "universal"]] (#started, #variables, #variable-number, #variable-alist) mode="render-definiens" {
  if [$started = "1"] {
    if [$variables] {
      $variable = `$variables[1]`;
      $variable-name = `$variable/@name`;
      $item = `concat ($variable-name, ":", $variable-number)`;
      $new-variable-alist = add-to-token-string (#item = $item, #token-string = $variable-alist);
      <For {
        <Typ {
          @kind = "M";
          @nr = "1";
          <Cluster;
        }
        apply [.] (#started = "1",
                   #variables = `$variables[position() > 1]`,
                   #variable-number = `$variable-number + 1`,
                   #variable-alist = $new-variable-alist) mode="render-definiens";

      }
    } else {
      apply [*[position() = last()]] (#variable-alist = $variable-alist) mode="render-definiens";
    }
  } else {
    $num-variables-bound-so-far
      = count-items-in-token-string (#token-string = $variable-alist);
    apply [.] (#started = "1",
               #variable-number = `$num-variables-bound-so-far + 1`,
               #variables = `variable`,
               #variable-alist = $variable-alist) mode="render-definiens";
  }
}

tpl [quantifier[@type = "existential"]] (#started, #variables, #variable-number, #variable-alist) mode="render-definiens" {
  if [$started = "1"] {
    if [$variables] {
      $variable = `$variables[1]`;
      $variable-name = `$variable/@name`;
      $item = `concat ($variable-name, ":", $variable-number)`;
      $new-variable-alist = add-to-token-string (#item = $item, #token-string = $variable-alist);
      <Not {
        <For {
          <Typ {
            @kind = "M";
            @nr = "1";
            <Cluster;
          }
          <Not {
            apply [.] (#started = "1",
                       #variables = `$variables[position() > 1]`,
                       #variable-number = `$variable-number + 1`,
                       #variable-alist = $new-variable-alist) mode="render-definiens";

          }
        }
      }
    } else {
      apply [*[position() = last()]] (#variable-alist = $variable-alist) mode="render-definiens";
    }
  } else {
    $num-variables-bound-so-far
      = count-items-in-token-string (#token-string = $variable-alist);
    apply [.] (#started = "1",
               #variable-number = `$num-variables-bound-so-far + 1`,
               #variables = `variable`,
               #variable-alist = $variable-alist) mode="render-definiens";
  }
}

tpl [conjunction] (#variable-alist) mode="render-definiens" {
  <And {
    apply [*] (#variable-alist = $variable-alist) mode="render-definiens";
  }
}

tpl [disjunction] (#variable-alist) mode="render-definiens" {
  <Not {
    <And {
      <Not {
        apply [*[1]] (#variable-alist = $variable-alist) mode="render-definiens";
      }
      <Not {
        apply [*[2]] (#variable-alist = $variable-alist) mode="render-definiens";
      }
    }
  }
}

tpl [negation] (#variable-alist) mode="render-definiens" {
  <Not {
    apply [*] (#variable-alist = $variable-alist) mode="render-definiens";
  }
}

tpl [implication] (#variable-alist) mode="render-definiens" {
  <Not {
    <And {
      apply [*[1]] (#variable-alist = $variable-alist) mode="render-definiens";
      <Not {
        apply [*[2]] (#variable-alist = $variable-alist) mode="render-definiens";
      }
    }
  }
}

tpl [equivalence] (#variable-alist) mode="render-definiens" {
  <And {
    <Not {
      <And {
        apply [*[1]] (#variable-alist = $variable-alist) mode="render-definiens";
        <Not {
          apply [*[2]] (#variable-alist = $variable-alist) mode="render-definiens";
        }
      }
    }
    <Not {
      <And {
        apply [*[2]] (#variable-alist = $variable-alist) mode="render-definiens";
        <Not {
          apply [*[1]] (#variable-alist = $variable-alist) mode="render-definiens";
        }
      }
    }
  }
}

tpl [predicate[@name = "="]] (#variable-alist) mode="render-definiens" {
  <Pred {
    @kind = "R";
    @nr = "1";  // magic constant: equality is the very first relation in HIDDEN
    apply [*] (#variable-alist = $variable-alist) mode="render-definiens";
  }
}

tpl [predicate[not(@name = "=")]] (#variable-alist) mode="render-definiens" {
  $n = `@name`;
  <Pred {
    @kind = "R";
    for-each [ancestor::tstp] {
      for-each [descendant::predicate[@name = $n][1]] {
        $position = `count (preceding::predicate[not(@name = preceding::predicate/@name)]) + 1`;
        @nr = `$position + 2`;
      }
    }
    apply [*] mode="render-definiens";
  }
}

tpl [variable[@name]] (#variable-alist) mode="render-definiens" {
  $n = `@name`;
  if [starts-with (@name, "V")] {
    $variable-number = `substring-after ($n, "V")`;
    // our variables start with 0, but Mizar numbering starts at 1
    <Var {
      @nr = `$variable-number + 1`;
    }
  } else {
    apply [.] (#message = "We found a variable whose name does not start with 'V'.") mode="die";
  }
}

tpl [function[@name]] (#variable-alist) mode="render-definiens" {
  $n = `@name`;
  <Func {
    @kind = "K";
    for-each [ancestor::tstp] {
      for-each [descendant::function[@name = $n][1]] {
        $position = `count (preceding::function[not(@name = preceding::function/@name)]) + 1`;
        @nr = $position;
      }
    }
    apply [*] mode="render-definiens";
  }
}

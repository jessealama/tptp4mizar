stylesheet "1.0";
include "../tstp/tstp2the.xsl";
output method="xml" indent="yes";
output omit-xml-declaration="no";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

#skolem-prefix = { "esk"; }

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [tstp] {

  $article-uc = uc (#s = `$article`);
  $original-uc = uc (#s = $original);
  $article-with-suffix = `concat ($article-uc, "_E")`;
  $original-with-suffix = `concat ($original-uc, "_E")`;
  $reference-dco-uc = uc (#s = `$reference-dco`);

  <Theorems {

    <Signature {
      <ArticleID {
        @"name" = "HIDDEN";
      }
      if [not($reference-dco = "")] {
        <ArticleID {
          @"name" = $reference-dco-uc;
        }
      }
      if [not($original = "")] {
        <ArticleID {
          @"name" = $original-with-suffix;
        }
      }
      <ArticleID {
        @"name" = $article-with-suffix;
      }
    }

    // Generate the axioms
    for-each [formula[@status = "axiom"]] {
      <Theorem {
        @kind = "T";
        apply [.] (#variable-alist = ",,") mode="render-definiens";
      }
    }

    $num-skolem-functions
      = `count(descendant::function[starts-with (@name, $skolem-prefix)
                                    and not(@name = preceding::function/@name)
                                    and not(@name = ancestor::function/@name)])`;
    for-each [formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "skolemize"]]] {
      $this-formula-name = `@name`;
      <Theorem {
        @kind = "D";
        @constrkind = "K";
        @constrnr = `position()`;
        <Not {
          <And {
            for-each [source] {
              for-each [non-logical-data[@name = "inference"]] {
                for-each [non-logical-data[position() = last()]] {
                  for-each [non-logical-data[@name and not(*)] | number[@name]] {
                    $other-formula-name = `@name`;
                    if [key ("formulas", $other-formula-name)] {
                      for-each [key ("formulas", $other-formula-name)] {
                        apply [*[1]] (#variable-alist = ",,") mode="render-definiens";
                      }
                    } else {
                      $message = `concat ("Error: formula ", $this-formula-name, " depends on formula ", $other-formula-name, ", but there appears to be no such formula.")`;
                      apply [.] (#message = $message) mode="die";
                    }
                  }
                }
              }
            }
            <Not {
              apply [.] (#variable-alist = ",,") mode="render-definiens";
            }
          }
        }
      }
    }
  }
}

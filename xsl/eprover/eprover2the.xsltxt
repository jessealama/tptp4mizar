stylesheet "1.0";
include "../utils/strings.xsl";
include "../utils/token-strings.xsl";
output method="xml" indent="yes";
output omit-xml-declaration="no";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

// The name of the article .def that we will create
#article = { ""; }

// The directory in which we will look for the dco file
#prel-directory = { ""; }

//////////////////////////////////////////////////////////////////////
// Keys
//////////////////////////////////////////////////////////////////////

key "formulas" [formula[@name]] `@name`;

tpl [*] mode="trace" {
  msg "We are about to terminate the XSLT processor.  Here's where we are:";
  apply [.] mode="trace-recursive";
}

tpl [*] mode="trace-recursive" {
  $n = `name (.)`;
  $position = `count (preceding-sibling::*[name() = $n]) + 1`;
  if [parent::*] {
    apply [..] mode="trace-recursive";
  }
  `$n`; "["; `$position`; "]"; "\n";
}

tpl [*] (#message) mode="die" {
  apply [.] mode="trace";
  msg terminate="yes" $message;
}

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [/] {
  choose {
    when [$article = ""] {
      apply [.] (#message = "Error: a value for the article stylesheet parameter was not supplied (or the empty string was supplied).") mode="die";
    }
    when [not(tstp)] {
      apply [.] (#message = "Error: this does not appear to be a TSTP XML document, because it lacks a 'tstp' root element.") mode="die";
    }
    when [tstp[2]] {
      apply [.] (#message = "Error: this does not appear to be a TSTP XML document, because it has multiple 'tstp' root elements.") mode="die";
    }
    otherwise {
      apply [tstp];
    }
  }
}

tpl [tstp] {
  $article-uc = uc (#s = `$article`);

  <Theorems {
    <Signature {
      <ArticleID {
        @"name" = "HIDDEN";
      }
      <ArticleID {
        @"name" = $article-uc;
      }
    }

    // Generate the axioms
    for-each [formula[@status = "axiom"]] {
      <Theorem {
        @kind = "T";
        apply [.] mode="render-definiens";
      }
    }

    // "Definitions" for skolem functions
    $num-functions = `count(descendant::function[@name and not(@name = preceding::function[@name]/@name) and not(@name = ancestor::function[@name]/@name)])`;
    for-each [formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "skolemize"]]] {
      $this-formula-name = `@name`;
      <Theorem {
        @kind = "D";
        @constrkind = "K";
        @constrnr = `position()`;
        <Not {
          <And {
            for-each [source] {
              for-each [non-logical-data[@name = "inference"]] {
                for-each [non-logical-data[position() = last()]] {
                  for-each [number[@name]] {
                    $other-formula-name = `@name`;
                    if [key ("formulas", $other-formula-name)] {
                      for-each [key ("formulas", $other-formula-name)] {
                        apply [*[1]] mode="render-definiens";
                      }
                    } else {
                      $message = `concat ("Error: formula ", $this-formula-name, " depends on formula ", $other-formula-name, ", but there appears to be no such formula.")`;
                      msg terminate="yes" $message;
                    }
                  }
                }
              }
            }
            <Not {
              apply [.] mode="render-definiens";
            }
          }
        }
      }
    }
  }
}

tpl [*] mode="render-definiens" {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node in render-definiens mode.")`;
  apply [.] (#message = $message) mode="die";
}

tpl [formula] mode="render-definiens" {
  for-each [*[1]] { // the formula proper of the TPTP formula
    apply [.] mode="render-definiens";
  }
}

tpl [quantifier[@type = "universal"]] (#started, #variables, #variable-number, #variable-alist) mode="render-definiens" {
  if [$started = "1"] {
    if [$variables] {
      $variable = `$variables[1]`;
      $variable-name = `$variable/@name`;
      $item = `concat ($variable-name, ":", $variable-number)`;
      $new-variable-alist = add-to-token-string (#item = $item, #token-string = $variable-alist);
      <For {
        <Typ {
          @kind = "M";
          @nr = "1";
          <Cluster;
        }
        apply [.] (#started = "1",
	      	   #variables = `$variables[position() > 1]`,
		   #variable-number = `$variable-number + 1`,
		   #variable-alist = $new-variable-alist) mode="render-definiens";

      }
    } else {
      apply [*[position() = last()]] (#variable-alist = $variable-alist) mode="render-definiens";
    }
  } else {
    if [$variable-alist] {
      $num-variables-bound-so-far = count-items-in-token-string (#token-string = $variable-alist);
      apply [.] (#started = "1",
                 #variable-number = `$num-variables-bound-so-far + 1`,
      	         #variables = `variable`,
	         #variable-alist = $variable-alist) mode="render-definiens";
    } else {
      apply [.] (#started = "1",
                 #variable-number = "1",
      	         #variables = `variable`,
	         #variable-alist = ",,") mode="render-definiens";
    }
  }
}

tpl [quantifier[@type = "existential"]] (#started, #variables, #variable-number, #variable-alist) mode="render-definiens" {
  if [$started = "1"] {
    if [$variables] {
      $variable = `$variables[1]`;
      $variable-name = `$variable/@name`;
      $item = `concat ($variable-name, ":", $variable-number)`;
      $new-variable-alist = add-to-token-string (#item = $item, #token-string = $variable-alist);
      <Not {
        <For {
          <Typ {
            @kind = "M";
            @nr = "1";
            <Cluster;
          }
          <Not {
            apply [.] (#started = "1",
  	      	       #variables = `$variables[position() > 1]`,
		       #variable-number = `$variable-number + 1`,
		       #variable-alist = $new-variable-alist) mode="render-definiens";
          }
        }
      }
    } else {
      apply [*[position() = last()]] (#variable-alist = $variable-alist) mode="render-definiens";
    }
  } else {
    if [$variable-alist] {
      $num-variables-bound-so-far = count-items-in-token-string (#token-string = $variable-alist);
      apply [.] (#started = "1",
                 #variable-number = `$num-variables-bound-so-far + 1`,
      	         #variables = `variable`,
	         #variable-alist = $variable-alist) mode="render-definiens";
    } else {
      apply [.] (#started = "1",
                 #variable-number = "1",
      	         #variables = `variable`,
	         #variable-alist = ",,") mode="render-definiens";
    }
  }
}

tpl [conjunction] (#variable-alist) mode="render-definiens" {
  <And {
    apply [*] (#variable-alist = $variable-alist) mode="render-definiens";
  }
}

tpl [disjunction] (#variable-alist) mode="render-definiens" {
  <Not {
    <And {
      <Not {
        apply [*[1]] (#variable-alist = $variable-alist) mode="render-definiens";
      }
      <Not {
        apply [*[2]] (#variable-alist = $variable-alist) mode="render-definiens";
      }
    }
  }
}

tpl [negation] (#variable-alist) mode="render-definiens" {
  <Not {
    apply [*] (#variable-alist = $variable-alist) mode="render-definiens";
  }
}

tpl [implication] (#variable-alist) mode="render-definiens" {
  <Not {
    <And {
      apply [*[1]] (#variable-alist = $variable-alist) mode="render-definiens";
      <Not {
        apply [*[2]] (#variable-alist = $variable-alist) mode="render-definiens";
      }
    }
  }
}

tpl [predicate[@name = "="]] (#variable-alist) mode="render-definiens" {
  <Pred {
    @kind = "R";
    @nr = "1";  // magic constant: equality is the very first relation in HIDDEN
    apply [*] (#variable-alist = $variable-alist) mode="render-definiens";
  }
}

tpl [predicate[@name and not(@name = "=")]] (#variable-alist) mode="render-definiens" {
  <Pred {
    @kind = "R";
    // @spelling = `@name`;
    $n = `@name`;
    $article-lc = lc (#s = $article);
    $article-dco = `concat ($prel-directory, "/", $article-lc, ".dco")`;
    if [document ($article-dco, /)] {
      for-each [document ($article-dco, /)] {
        if [Constructors/Constructor[@kind = "R" and @spelling = $n and @nr]] {
          for-each [Constructors/Constructor[@kind = "R" and @spelling = $n and @nr]] {
            @nr = `@nr + 2`; // compensates for equality and membership in HIDDEN
          }
        } else {
          $message = `concat ("Error: unable to find the predicate ", $n, " in ", $article-dco, ".")`;
          msg terminate="yes" $message;
        }
      }

      apply [*] (#variable-alist = $variable-alist) mode="render-definiens";

    } else {
      $message = `concat ("Error: unable to open ", $article-dco, " (or it is empty, but we assume it is non-empty.)")`;
      msg terminate="yes" $message;
    }
  }
}

tpl [variable[@name]] (#variable-alist) mode="render-definiens" {
  $n = `@name`;
  $pseudo-token = `concat (",", $n, ":")`;
  if [contains ($variable-alist, $pseudo-token)] {
    $after-pseudo-token = `substring-after ($variable-alist, $pseudo-token)`;
    $item = `substring-before ($after-pseudo-token, ",")`;
    <Var {
      @nr = $item;
    }
  } else {
    $message = `concat ("Error: we tried to look up the variable '", $n, "' in the association list '", $variable-alist, "', but we did not find the variable.")`;
    apply [.] (#message = $message) mode="die";
  }
}

tpl [function[@name]] (#variable-alist) mode="render-definiens" {
  <Func {
    @kind = "K";
    // @spelling = `@name`;
    $n = `@name`;
    $article-lc = lc (#s = $article);
    $article-dco = `concat ($prel-directory, "/", $article-lc, ".dco")`;
    if [document ($article-dco, /)] {
      for-each [document ($article-dco, /)] {
        if [Constructors/Constructor[@kind = "K" and @spelling = $n and @nr]] {
          for-each [Constructors/Constructor[@kind = "K" and @spelling = $n and @nr]] {
            @nr = `@nr`;
          }
        } else {
          $message = `concat ("Error: unable to find the function ", $n, " in ", $article-dco, ".")`;
          msg terminate="yes" $message;
        }
      }

      apply [*] (#variable-alist = $variable-alist) mode="render-definiens";

    } else {
      $message = `concat ("Error: unable to open ", $article-dco, " (or it is empty, but we assume it is non-empty.)")`;
      msg terminate="yes" $message;
    }
  }
}
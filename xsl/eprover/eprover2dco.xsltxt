stylesheet "1.0";
include "../tstp/tstp2dco.xsl";
output method="xml" indent="yes";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

// The article from which some other constructors may come
#article = { ""; }

// The name of the article .dco that we will create
#only-skolems = { ""; }

// Whether to skip treating all skolems.  The only value recognized is
// '1'; anything else means that skolems will be considered.
#no-skolems = { ""; }

// Skolem prefix.  Any function whose name starts with this prefix
// will be considered a skolem function.
#skolem-prefix = { "esk"; }

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [tstp] {
  $num-skolem-functions
    = `count(descendant::function[starts-with (@name, $skolem-prefix)
                                  and not(@name = preceding::function/@name)
                                  and not(@name = ancestor::function/@name)])`;
  $num-predicates
    = `count(descendant::predicate[not(@name = "=")
             and not(@name = preceding::predicate/@name)])`;
  $num-functions
    = `count(descendant::function[not(@name = preceding::function/@name)
                                  and not(@name = ancestor::function/@name)])`;
  $article-uc = uc (#s = `$article`);
  <Constructors {

    <Signature {
      <ArticleID { @"name" = "HIDDEN"; }
    }

    <ConstrCounts {
      <ConstrCount {
        @kind = "R";
        if [$only-skolems = "1"] {
          @nr = "0";
        } else {
          @nr = `$num-predicates`;
        }
      }
      <ConstrCount {
        @kind = "K";
        if [$only-skolems = "1"] {
          @nr = `$num-skolem-functions`;
        } else {
          @nr = `$num-functions`;
        }
      }
    }
    if [$only-skolems = "1"] {
      for-each [descendant::function[starts-with (@name, $skolem-prefix)
                                     and not(@name = preceding::function/@name)
                                     and not(@name = ancestor::function/@name)]] {
        apply [.] (#nr = `position ()`,
	      	   #relnr = `position ()`,
                   #aid = $article-uc);
      }
    } else {
      for-each [descendant::predicate[not(@name = "=")
                                      and not(@name = preceding::predicate/@name)]] {
        apply [.] (#nr = `position() + 2`,
	           #relnr = `position ()`,
	      	   #aid = $article-uc);
      }
      if [$no-skolems = "1"] {
        for-each [descendant::function[not(starts-with (@name, $skolem-prefix))
                                       and not(@name = preceding::function/@name)
                                       and not(@name = ancestor::function/@name)]] {
          apply [.] (#nr = `position ()`,
  	      	   #relnr = `position ()`,
  	      	   #aid = $article-uc);
        }
      } else {
        for-each [descendant::function[not(@name = preceding::function/@name)
                                       and not(@name = ancestor::function/@name)]] {
          apply [.] (#nr = `position ()`,
  	      	   #relnr = `position ()`,
  	      	   #aid = $article-uc);
        }
      }
    }
  }
}

tpl [function] (#nr, #relnr, #aid) {
  <Constructor {
    @kind = "K";
    @nr = $nr;
    @aid = $aid;
    @relnr = $relnr;
    @spelling = `@name`;
    <ArgTypes {
      for-each [*] {
        <Typ {
          @kind = "M";
          @nr = "1";
          <Cluster;
        }
      }
    }
    <Typ {
      @kind = "M";
      @nr = "1";
      <Cluster;
    }
  }
}

tpl [predicate] (#nr, #relnr, #aid) {
  <Constructor {
    @kind = "R";
    @nr = $nr;
    @aid = $aid;
    @relnr = $relnr;
    @spelling = `@name`;
    <ArgTypes {
      for-each [*] {
        <Typ {
          @kind = "M";
          @nr = "1";
          <Cluster;
        }
      }
    }
  }
}
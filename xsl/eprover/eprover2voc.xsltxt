stylesheet "1.0";
include "../tptp/tptp2voc.xsl";
output method="text";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

// Emit only skolem symbols
#only-skolems = { ""; }

// Whether to skip handling all skolem functions
#no-skolems = { ""; }

// The prefix that skolems are supposed to have.  Functions that do
// not have this prefix will not be regarded as skolem functions.
#skolem-prefix = { "esk"; }

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [tstp] {
  if [$only-skolems = "1"] {
    for-each [descendant::function[starts-with (@name, $skolem-prefix) and not(@name = preceding::function[@name]/@name) and not(@name = ancestor::function[@name]/@name)]] {
      apply [.]; "\n";
    }
  } else {
    for-each [descendant::predicate[@name and not(@name = "=") and not(@name = preceding::predicate[@name]/@name)]] {
      apply [.]; "\n";
    }
    if [$no-skolems = "1"] {
      for-each [descendant::function[not(starts-with (@name, $skolem-prefix)) and not(@name = preceding::function[@name]/@name) and not(@name = ancestor::function[@name]/@name)]] {
        apply [.]; "\n";
      }
    } else {
      for-each [descendant::function[@name and not(@name = preceding::function[@name]/@name) and not(@name = ancestor::function[@name]/@name)]] {
        apply [.]; "\n";
      }
    }
  }
}

tpl [predicate[@name and not(@name = "=")]] {
  "R"; `@name`;
}

tpl [function[@name]] {
  "O"; `@name`;
}

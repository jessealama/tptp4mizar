stylesheet "1.0";
include "../tstp/tstp2wsx.xsl";
output method="xml" indent="yes";

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [tstp[formula[@status = "conjecture"]]] {
  $aid-uc = uc (#s = $article);
  <Text-Proper {
    @articleid = $aid-uc;
    <Item {
      @kind = "Section-Pragma";
    }
    reserve-variables ();
    choose {
      when [$shape = "flat"] {
        apply [.] mode="flat";
      }
      when [$shape = "nested"] {
        apply [.] mode="nested";
      }
      otherwise {
        $message = `concat ("Error: unknown shape '", $shape, "'.")`;
        msg terminate="yes" $message;
      }
    }
  }
}

tpl [tstp] mode="flat" {
  for-each [formula[@status = "axiom"]] {
    apply [.] mode="axiom";
  }
  <Item {
    @kind = "Regular-Statement";
    @shape = "Diffuse-Statement";
    <Label {
      @spelling = "Refutation";
    }
    <Block {
      @kind = "Now-Reasoning";
      for-each [formula[not(@status = "axiom") and not(@status = "conjecture") and source/non-logical-data[@name = "inference"]]] {
        choose {
          when [@status = "negated_conjecture" and not(preceding-sibling::formula[@status = "negated_conjecture"])] {
            <Item {
              @kind = "Assumption";
              <Single-Assumption {
                apply [.] mode="no-justification";
              }
            }
          }
          when [position() = last()] {
            apply [.] mode="conclusion";
          }
          otherwise {
            apply [.] mode="lemma";
          }
        }
      }
    }
  }
  <Item {
    @kind = "Theorem-Item";
    for-each [formula[@status = "conjecture"]] {
      <Proposition {
      apply [*[1]]; // render the formula
      }
    }
    <Straightforward-Justification {
      <Local-Reference {
        @spelling = "Refutation";
      }
    }
  }
}

// E 1.4 TSTP derivations have a conjecture formula
tpl [tstp[formula[@status = "conjecture"][2]]] {
  msg terminate="yes" "Error: there are multiple conjecture formulas, but we expected to find exactly one.";
}

tpl [tstp[not(formula[@status = "conjecture"])]] {
  msg terminate="yes" "Error: there is no conjecture formula.";
}

tpl [tstp] mode="nested" {
  for-each [formula[@status = "axiom"]] {
    apply [.] mode="axiom";
  }
  for-each [formula[not(@status = "axiom") and source/non-logical-data[@name = "inference"]]] {
    $depends-on-conjecture = depends-on-conjecture ();
    if [$depends-on-conjecture = "0"] {
      apply [.] mode="lemma";
    }
  }
  for-each [formula[@status = "conjecture"]] {
    apply [.] mode="conjecture";
  }
}

tpl [formula[@name and source/non-logical-data[@name = "inference"]/non-logical-data[@name = "csr"]]] mode="lemma" {
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        $safe-name = capitalize-after-underscore (#string = `@name`);
        $step-name = `concat ("Step", $safe-name)`;
        @spelling = $step-name;
      }
      apply [*[1]] mode="strip-universal-prefix";
    }
    <Block {
      @kind = "Proof";
      for-each [source] {
        for-each [non-logical-data[@name = "inference"]] {
          for-each [non-logical-data[position() = last()]] {
            for-each [number[@name]] {
              $n = `@name`;
              $position = `position ()`;
              $dependent-formula = `key ("formulas", $n)`;
              choose {
                when [position() = 1] {
                  for-each [$dependent-formula] {
                    apply [.] mode="reiterate";
                  }
                }
                when [position() = 2] {
                  <Item {
                    @kind = "Conclusion";
                    @shape = "Compact-Statement";
                    <Proposition {
                      <Thesis;
                    }
                    <Straightforward-Justification {
                      <Link;
                      <Local-Reference {
                        for-each [$dependent-formula] {
                          $dependent-formula-name = `@name`;
                          if [@status = "axiom"] {
                            $safe-name = capitalize-after-underscore (#string = $dependent-formula-name);
                            $padded = pad-axiom (#string = $safe-name);
                            @spelling = $padded;
                          } else {
                            @spelling = `concat ("Step", $dependent-formula-name)`;
                          }
                        }
                      }
                    }
                  }
                }
                otherwise {
                  apply [.] mode="trace";
                  msg terminate="yes" "Error: we are dealing with a CSR inference having more than two premises.";
                }
              }
            }
          }
        }
      }
    }
  }
}

tpl [formula[@name and not(source/non-logical-data[@name = "inference"]/non-logical-data[@name = "csr"])]] mode="lemma" {
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        $safe-name = capitalize-after-underscore (#string = `@name`);
        $step-name = `concat ("Step", $safe-name)`;
        @spelling = $step-name;
      }
      apply [*[1]] mode="strip-universal-prefix";
    }
    <Straightforward-Justification {
      for-each [source] {
        for-each [non-logical-data[@name = "inference"]] {
          for-each [non-logical-data[position() = last()]] {
            for-each [number[@name]] {
              $n = `@name`;
              <Local-Reference {
                if [key ("axiom", $n)] {
                  for-each [key ("axiom", $n)] {
                    for-each [source] {
                      for-each [non-logical-data[@name = "file"]] {
                        for-each [non-logical-data[position() = last()]] {
                          $safe-name = capitalize-after-underscore (#string = `@name`);
                          $padded = pad-axiom (#string = $safe-name);
                          @spelling = $padded;
                        }
                      }
                    }
                  }
                } else {
                  $safe-name = capitalize-after-underscore (#string = `@name`);
                  $step-name = `concat ("Step", $safe-name)`;
                  @spelling = $step-name;
                }
              }
            }
          }
          if [non-logical-data[@name = "skolemize"]] {
            <Definition-Reference {
              @spelling = "SKOLEM";
              @"number" = `count (preceding::formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "skolemize"]]) + 1`;
            }
          }
        }
      }
    }
  }
}

stylesheet "1.0";
include "../tstp/tstp2wsx.xsl";
output method="xml" indent="yes";

//////////////////////////////////////////////////////////////////////
// Keys
//////////////////////////////////////////////////////////////////////

key "splits"
    [formula[source/non-logical-data[@name = "introduced"]/non-logical-data[@name = "definition"]]]
    `@name`;

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [tstp[formula[@status = "conjecture"]]] {
  $aid-uc = uc (#s = $article);
  <Text-Proper {
    @articleid = $aid-uc;
    <Item {
      @kind = "Section-Pragma";
    }
    reserve-variables ();
    choose {
      when [$shape = "flat"] {
        apply [.] mode="flat";
      }
      when [$shape = "nested"] {
        apply [.] mode="nested";
      }
      otherwise {
        apply [.] mode="flat";
      }
    }
  }
}

tpl [tstp] mode="flat" {
  for-each [formula[@status = "axiom"]] {
    apply [.] mode="axiom";
  }
  <Item {
    @kind = "Regular-Statement";
    @shape = "Diffuse-Statement";
    <Label {
      @spelling = "Refutation";
    }
    <Block {
      @kind = "Now-Reasoning";
      for-each [formula[not(@status = "axiom") and not(@status = "conjecture") and (source/non-logical-data[@name = "inference"] or source/non-logical-data[@name = "introduced"]/non-logical-data[@name = "definition"])]] {
        choose {
          when [@status = "negated_conjecture" and not(preceding-sibling::formula[@status = "negated_conjecture"])] {
            <Item {
              @kind = "Assumption";
              <Single-Assumption {
                apply [.] mode="no-justification";
              }
            }
          }
          when [position() = last()] {
            apply [.] mode="conclusion";
          }
          otherwise {
            apply [.] mode="lemma";
          }
        }
      }
    }
  }
  <Item {
    @kind = "Theorem-Item";
    for-each [formula[@status = "conjecture"]] {
      <Proposition {
      apply [*[1]]; // render the formula
      }
    }
    <Straightforward-Justification {
      <Local-Reference {
        @spelling = "Refutation";
      }
    }
  }
}

// E 1.4 TSTP derivations have a conjecture formula
tpl [tstp[formula[@status = "conjecture"][2]]] {
  msg terminate="yes" "Error: there are multiple conjecture formulas, but we expected to find exactly one.";
}

tpl [tstp[not(formula[@status = "conjecture"])]] {
  msg terminate="yes" "Error: there is no conjecture formula.";
}

tpl [tstp] mode="nested" {
  for-each [formula[@status = "axiom"]] {
    apply [.] mode="axiom";
  }
  for-each [formula[not(@status = "axiom") and source/non-logical-data[@name = "inference"]]] {
    $depends-on-conjecture = depends-on-conjecture ();
    if [$depends-on-conjecture = "0"] {
      apply [.] mode="lemma";
    }
  }
  for-each [formula[@status = "conjecture"]] {
    apply [.] mode="conjecture";
  }
}

tpl [formula[@name and source/non-logical-data[@name = "inference"]/non-logical-data[@name = "csr" or @name = "fof_nnf" or @name = "spm"]]] mode="lemma" {
  $step-name = `@name`;
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        @spelling = `@name`;
      }
      // apply [*[1]] mode="strip-universal-prefix";
      apply [*[1]];
    }
    <Straightforward-Justification {
      for-each [source] {
        for-each [non-logical-data[@name = "inference"]] {
          for-each [non-logical-data[position() = last()]] {
            for-each [descendant::*[@name]] {
              $n = `@name`;
              if [key ("formulas", $n)] {
                <Local-Reference {
                  @spelling = $n;
                }
              } else {
                msg `concat ("Warning: unknown formula '", $n, "'.")`;
              }
            }
          }
        }
      }
    }
  }
}

tpl [formula[@name and not(source/non-logical-data[@name = "inference"]/non-logical-data[@name = "csr" or @name = "fof_nnf" or @name = "spm"]) and not(source/non-logical-data[@status = "introduced"]/non-logical-data[@name = "inference"])]] mode="lemma" {
  <Item {
    @kind = "Regular-Statement";
    @shape = "Compact-Statement";
    <Proposition {
      <Label {
        @spelling = `@name`;
      }
      // apply [*[1]] mode="strip-universal-prefix";
      apply [*[1]];
    }
    <Straightforward-Justification {
      for-each [source] {
        apply [.];
      }
    }
  }
}

tpl [source] {
  for-each [non-logical-data[@name = "inference"]] {
    for-each [non-logical-data[position() = last()]] {
      for-each [descendant::*[@name]] {
        $n = `@name`;
        msg `concat ("Considering '", $n, "'")`;
        choose {
          when [key ("splits", $n)] {
            // ignore
          }
          when [key ("formulas", $n)] {
            <Local-Reference {
              @spelling = `@name`;
            }
          }
          otherwise {
            msg `concat ("Warning (eprover2wsx): unknown formula '", $n, "'.")`;
          }
        }
      }
    }
    if [non-logical-data[@name = "skolemize"]] {
      $aid-uc = uc (#s = $article);
      $aid-with-suffix = `concat ($aid-uc, "E")`;
      <Definition-Reference {
        @spelling = $aid-with-suffix;
        @"number" = `count (preceding::formula[source/non-logical-data[@name = "inference"]/non-logical-data[@name = "skolemize"]]) + 1`;
      }
    }
  }
}

tpl [formula[source/non-logical-data[@name = "introduced"]/non-logical-data[@name = "definition"]]] mode="lemma" {
  for-each [*[1]] {
    if [not(self::equivalence)] {
      msg terminate="yes" "Error: a predicate is being introduced, but not by an equivalence.";
    }
    <Item {
      @kind = "Private-Predicate-Definition";
      for-each [*[1]] {
        choose {
          when [self::negation] {
            msg "negation case";
            if [predicate[@name]] {
              for-each [predicate[@name]] {
                <Variable {
                  @spelling = `@name`;
                }
                <Type-List;
                <Negated-Formula {
                  for-each [parent::negation] {
                    apply [following-sibling::*[1]];
                  }
                }
              }
            } else {
              $n = `name (.)`;
              $message = `concat ("Error: Don't know how to handle a ", $n, " node.  Where is the predicate definition?")`;
              apply [.] (#message = $message) mode="die";
            }
          }
          when [predicate[@name]] {
            for-each [predicate[@name]] {
              <Variable {
                @spelling = `@name`;
              }
              <Type-List;
              apply [following-sibling::*[1]];
            }
          }
          otherwise {
            $n = `name (.)`;
            $message = `concat ("Error: Don't know how to handle a ", $n, " node.  Where is the predicate definition?")`;
            apply [.] (#message = $message) mode="die";
          }
        }
      }
    }
  }
}
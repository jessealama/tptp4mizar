stylesheet "1.0";
include "../tptp/tptp2dno.xsl";
output method="xml" indent="yes";
output omit-xml-declaration="no";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

// Deal only with skolems
#only-skolems = { ""; }

// Skolems have this prefix.  Any function whose name begins with this
// prefix will be regarded as a skolem function.
#skolem-prefix = { "esk"; }

#no-skolems = { ""; }

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [tstp] {
  $article-uc = uc (#s = `$article`);
  $num-predicates
    = `count(descendant::predicate[not(@name = "=")
                                   and not(@name = preceding::predicate/@name)])`;
  $num-functions
    = `count(descendant::function[not(@name = preceding::function/@name)
                                  and not(@name = ancestor::function/@name)])`;
  $num-skolem-functions
    = `count(descendant::function[starts-with (@name, $skolem-prefix)
                                  and not(@name = preceding::function/@name)
                                  and not(@name = ancestor::function/@name)])`;
  <Notations {

    <Signature {
      <ArticleID { @"name" = "HIDDEN"; }
      <ArticleID { @"name" = `$article-uc`; }
    }


    <Vocabularies {

      <Vocabulary {
        <ArticleID { @"name" = `$article-uc`; }

        // we don't handle these kinds of symbols (yet)
        <SymbolCount { @kind = "U"; @nr = "0"; }
        <SymbolCount { @kind = "V"; @nr = "0"; }
        <SymbolCount { @kind = "G"; @nr = "0"; }
        <SymbolCount { @kind = "K"; @nr = "0"; }
        <SymbolCount { @kind = "L"; @nr = "0"; }
        <SymbolCount { @kind = "M"; @nr = "0"; }

        <SymbolCount {
          @kind = "O";
          if [$only-skolems = "1"] {
            @nr = $num-skolem-functions;
          } else {
            @nr = $num-functions;
          }
        }

        <SymbolCount {
          @kind = "R";
          if [$only-skolems = "1"] {
            @nr = "0";
          } else {
            @nr = $num-predicates;
          }
        }

      }
    }

    if [not($only-skolems = "1")] {
      for-each [descendant::predicate[not(@name = "=")
                                      and not(@name = preceding::predicate/@name)]] {
        apply [.] (#nr = `position ()`,
                   #constrnr = `position() + 2`,
                   #aid = $article-uc);
      }
    }

    choose {
      when [$only-skolems = "1"] {
        for-each [descendant::function[starts-with (@name, $skolem-prefix)
                                       and not(@name = preceding::function/@name)
                                       and not(@name = ancestor::function/@name)]] {
          apply [.] (#aid = $article-uc,
                   #nr = `position ()`,
                   #constrnr = `position ()`);
        }
      }
      when [$no-skolems = "1"] {
        for-each [descendant::function[not(starts-with (@name, $skolem-prefix))
                                       and not(@name = preceding::function/@name)
                                       and not(@name = ancestor::function/@name)]] {
          apply [.] (#aid = $article-uc,
                   #nr = `position ()`,
                   #constrnr = `position ()`);
        }
      }
      otherwise {
        for-each [descendant::function[not(@name = preceding::function/@name)
                                       and not(@name = ancestor::function/@name)]] {
          apply [.] (#aid = $article-uc,
                   #nr = `position ()`,
                   #constrnr = `position ()`);
        }
      }
    }
  }
}

tpl [function] (#nr, #constrnr, #aid) {
  <Pattern {
    @kind = "K";
    @nr = $nr;
    @aid = $aid;
    @constrkind = "K";
    @constrnr = $constrnr;
    <Format {
      @kind = "O";
      @symbolnr = $nr;
      @argnr = `count (*)`;
      @leftargnr = "0";
      @spelling = `@name`;
    }
    <ArgTypes {
      for-each [*] {
        set ();
      }
    }
    <Visible {
      for-each [*] {
        <Int {
          @x = `position()`;
        }
      }
    }
  }
}

tpl [predicate] (#nr, #constrnr, #aid) {
  <Pattern {
    @kind = "R";
    @nr = $nr;
    @aid = $aid;
    @constrkind = "R";
    @constrnr = $constrnr;
    <Format {
      @kind = "R";
      @symbolnr = $nr;
      @argnr = `count (*)`;
      @leftargnr = "0";
      @spelling = `@name`;
    }
    <ArgTypes {
      for-each [*] {
        set ();
      }
    }
    <Visible {
      for-each [*] {
        <Int {
          @x = `position()`;
        }
      }
    }
  }
}

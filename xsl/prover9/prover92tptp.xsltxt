stylesheet "1.0";
include "../utils/die.xsl";
output method="xml" indent="yes";

key "clauses" [clause] `@id`;

tpl [*] {
  $n = `name (.)`;
  $message = `concat ("We have arrived at an unhandled ", $n, "node.")`;
  apply [.] (#message = $message) mode="die";
}

tpl [/] {
  if [proofs] {
    apply [proofs];
  } else {
    msg terminate="yes" "Error: the required proofs root element is missing.";
  }
}

tpl [proofs] {
  choose {
    when [proof[2]] {
      msg terminate="yes" "Error: there are multiple proof children of the proofs root element; don't know what to do.";
    }
    when [proof] {
      <tstp {
        apply [proof];
      }
    }
    otherwise {
      msg terminate="yes" "Error: no proof children were found under the proofs root element.";
    }
  }
}

tpl [proof] {
  apply [clause];
}

tpl drop-enclosing-parentheses (#string) {
  $length = `string-length ($string)`;
  $truncated-length = `$length - 2`;
  `substring ($string, 2, $truncated-length)`;
}

tpl parse-quantifier-prefix (#string) {
  choose {
    when [starts-with ($string, "(")] {
      parse-ladr-formula (#string = $string);
    }
    when [starts-with ($string, "exists")] {
      $after-first-space = `substring-after ($string, " ")`;
      $variable = `substring-before ($after-first-space, " ")`;
      $remaining = `substring-after ($after-first-space, " ")`;
      <quantifier {
        @type = "existential";
        <variable {
          @"name" = $variable;
        }
        parse-quantifier-prefix (#string = $remaining);
      }
    }
    when [starts-with ($string, "all")] {
      $after-first-space = `substring-after ($string, " ")`;
      $variable = `substring-before ($after-first-space, " ")`;
      $remaining = `substring-after ($after-first-space, " ")`;
      <quantifier {
        @type = "universal";
        <variable {
          @"name" = $variable;
        }
        parse-quantifier-prefix (#string = $remaining);
      }
    }
    otherwise {
      $parse-error-message = `concat ("Error: don't know how to parse '", $string, "' as a quantifier prefix formula.")`;
      msg terminate="yes" $parse-error-message;
    }
  }
}

tpl string-is-variable (#string) {
  choose {
    when [contains ($string, " ")] {
      "0";
    }
    when [contains ($string, "(")] {
      "0";
    }
    when [contains ($string, ",")] {
      "0";
    }
    when [starts-with ($string, "A")] {
      "1";
    }
    when [starts-with ($string, "B")] {
      "1";
    }
    when [starts-with ($string, "C")] {
      "1";
    }
    when [starts-with ($string, "D")] {
      "1";
    }
    when [starts-with ($string, "E")] {
      "1";
    }
    when [starts-with ($string, "F")] {
      "1";
    }
    when [starts-with ($string, "G")] {
      "1";
    }
    when [starts-with ($string, "H")] {
      "1";
    }
    when [starts-with ($string, "I")] {
      "1";
    }
    when [starts-with ($string, "J")] {
      "1";
    }
    when [starts-with ($string, "K")] {
      "1";
    }
    when [starts-with ($string, "L")] {
      "1";
    }
    when [starts-with ($string, "M")] {
      "1";
    }
    when [starts-with ($string, "N")] {
      "1";
    }
    when [starts-with ($string, "O")] {
      "1";
    }
    when [starts-with ($string, "P")] {
      "1";
    }
    when [starts-with ($string, "Q")] {
      "1";
    }
    when [starts-with ($string, "R")] {
      "1";
    }
    when [starts-with ($string, "S")] {
      "1";
    }
    when [starts-with ($string, "T")] {
      "1";
    }
    when [starts-with ($string, "U")] {
      "1";
    }
    when [starts-with ($string, "V")] {
      "1";
    }
    when [starts-with ($string, "W")] {
      "1";
    }
    when [starts-with ($string, "X")] {
      "1";
    }
    when [starts-with ($string, "Y")] {
      "1";
    }
    when [starts-with ($string, "Z")] {
      "1";
    }
    otherwise {
      "0";
    }
  }
}

tpl string-is-constant (#string) {
  choose {
    when [contains ($string, " ")] {
      "0";
    }
    when [contains ($string, "(")] {
      "0";
    }
    when [contains ($string, ",")] {
      "0";
    }
    when [starts-with ($string, "a")] {
      "1";
    }
    when [starts-with ($string, "b")] {
      "1";
    }
    when [starts-with ($string, "c")] {
      "1";
    }
    when [starts-with ($string, "d")] {
      "1";
    }
    when [starts-with ($string, "e")] {
      "1";
    }
    when [starts-with ($string, "f")] {
      "1";
    }
    when [starts-with ($string, "g")] {
      "1";
    }
    when [starts-with ($string, "h")] {
      "1";
    }
    when [starts-with ($string, "i")] {
      "1";
    }
    when [starts-with ($string, "j")] {
      "1";
    }
    when [starts-with ($string, "k")] {
      "1";
    }
    when [starts-with ($string, "l")] {
      "1";
    }
    when [starts-with ($string, "m")] {
      "1";
    }
    when [starts-with ($string, "n")] {
      "1";
    }
    when [starts-with ($string, "o")] {
      "1";
    }
    when [starts-with ($string, "p")] {
      "1";
    }
    when [starts-with ($string, "q")] {
      "1";
    }
    when [starts-with ($string, "r")] {
      "1";
    }
    when [starts-with ($string, "s")] {
      "1";
    }
    when [starts-with ($string, "t")] {
      "1";
    }
    when [starts-with ($string, "u")] {
      "1";
    }
    when [starts-with ($string, "v")] {
      "1";
    }
    when [starts-with ($string, "w")] {
      "1";
    }
    when [starts-with ($string, "x")] {
      "1";
    }
    when [starts-with ($string, "y")] {
      "1";
    }
    when [starts-with ($string, "z")] {
      "1";
    }
    otherwise {
      "0";
    }
  }
}

tpl first-term-of-term-string (#string) {
  choose {
    when [$string = ""] {
      msg terminate="yes" "Error: from the empty string we cannot extract the first term.";
    }
    when [contains ($string, ",")] {
      `substring-before ($string, ",")`;
    }
    otherwise {
      $string;
    }
  }
}

tpl parse-term (#string) {
  $is-variable = string-is-variable (#string = $string);
  $is-constant = string-is-constant (#string = $string);
  choose {
    when [$is-variable = "1"] {
      <variable {
        @"name" = $string;
      }
    }
    when [$is-constant = "1"] {
      <function {
        @"name" = $string;
      }
    }
    when [contains ($string, "(")] {
      $function-name = `substring-before ($string, "(")`;
      $rest = `substring-after ($string, $function-name)`;
      <function {
        @"name" = $function-name;
        parse-argument-list (#string = $rest);
      }
    }
    otherwise {
      $parse-error-message = `concat ("Error: don't know how to parse the term '", $string, "'.")`;
      msg terminate="yes" $parse-error-message;
    }
  }

}

tpl parse-argument-list-1 (#string) {
  $message = `concat ("parse-argument-list-1: string = '", $string, "'")`;
  msg $message;
  if [contains ($string, ",")] {
    $first-term = first-term-of-term-string (#string = $string);
    $tail = `substring-after ($string, $first-term)`;
    $after-comma-tail = `substring-after ($tail, ",")`;
    parse-term (#string = $first-term);
    parse-argument-list-1 (#string = $after-comma-tail);
  } else {
    parse-term (#string = $string);
  }
}

tpl parse-argument-list (#string) {
  $sans-outer-parens = drop-enclosing-parentheses (#string = $string);
  parse-argument-list-1 (#string = $sans-outer-parens);
}

tpl parse-atomic-formula (#string = $string) {
  $predicate-name = `substring-before ($string, "(")`;
  <predicate {
    @"name" = $predicate-name;
    parse-argument-list (#string = `substring-after ($string, $predicate-name)`);
  }
}

tpl parse-composite-non-quantified-formula (#string) {
  if [contains ($string, " ")] {
    $first-formula = `substring-before ($string, " ")`;
    $after-space = `substring-after ($string, " ")`;
    choose {
      when [starts-with ($after-space, "|")] {
        $after-disjunction-sign = `substring-after ($after-space, "|")`;
        $normalized = `normalize-space ($after-disjunction-sign)`;
        <disjunction {
          parse-ladr-formula (#string = $first-formula);
          parse-ladr-formula (#string = `concat ("(", $normalized, ")")`);
        }
      }
      when [starts-with ($after-space, "&")] {
        $after-conjunction-sign = `substring-after ($after-space, "&")`;
        $normalized = `normalize-space ($after-conjunction-sign)`;
        <conjunction {
          parse-ladr-formula (#string = $first-formula);
          parse-ladr-formula (#string = `concat ("(", $normalized, ")")`);
        }
      }
      otherwise {
        $parse-error-message = `concat ("Error: don't know how to parse '", $string, "' as a composite non-quantified formula.")`;
        msg terminate="yes" $parse-error-message;
      }
    }
  } else {
    $parse-error-message = `concat ("Error: don't know how to parse '", $string, "' as a composite non-quantified formula.")`;
    msg terminate="yes" $parse-error-message;
  }
}

tpl parse-ladr-formula (#string) {
  choose {
    when [$string = "$F"] {
      <defined-predicate {
        @"name" = "false";
      }
    }
    when [starts-with ($string, "(all ")] {
      $sans-outer-parens = drop-enclosing-parentheses (#string = $string);
      parse-quantifier-prefix (#string = $sans-outer-parens);
    }
    when [starts-with ($string, "(exists ")] {
      $sans-outer-parens = drop-enclosing-parentheses (#string = $string);
      parse-quantifier-prefix (#string = $sans-outer-parens);
    }
    when [starts-with ($string, "-")] {
      $after-negation = `substring-after ($string, "-")`;
      <negation {
        parse-ladr-formula (#string = $after-negation);
      }
    }
    when [starts-with ($string, "(")] {
      if [contains ($string, "|")
            or contains ($string, "&")] {
        $sans-outer-parens = drop-enclosing-parentheses (#string = $string);
        parse-composite-non-quantified-formula (#string = $sans-outer-parens);
      } else {
        $sans-outer-parens = drop-enclosing-parentheses (#string = $string);
        parse-ladr-formula (#string = $sans-outer-parens);
      }
    }
    otherwise {
      parse-atomic-formula (#string = $string);
    }
  }
}

tpl [clause[@type = "assumption"]] {
  <formula {
    @"name" = `@id`;
    @syntax = "formula";
    @status = "hypothesis";
    if [literals[2]] {
      <disjunction {
        emit-literals (#literals = `literal`);
      }
    } else {
      for-each [literal] {
        for-each [text()] {
          $s = `string (.)`;
          parse-ladr-formula (#string = `normalize-space ($s)`);
        }
      }
    }
    <source;
    <useful-info {
      <non-logical-data {
        for-each [literal] {
          for-each [text()] {
            $s = `string (.)`;
            @text = `normalize-space ($s)`;
          }
        }
      }
    }
  }
}

tpl emit-literals (#literals) {
  if [$literals] {
    $literal = `$literals[1]`;
    for-each [$literal] {
      for-each [text()] {
        $s = `string (.)`;
        parse-ladr-formula (#string = `normalize-space ($s)`);
      }
    }
    emit-literals (#literals = `$literals[position() > 1]`);
  }
}

tpl [clause[@type = "clausify"]] {
  <formula {
    @"name" = `@id`;
    @syntax = "formula";
    @status = "plain";
    if [literals[2]] {
      <disjunction {
        emit-literals (#literals = `literal`);
      }
    } else {
      for-each [literal] {
        for-each [text()] {
          $s = `string (.)`;
          parse-ladr-formula (#string = `normalize-space ($s)`);
        }
      }
    }
    <source {
      <non-logical-data {
        @"name" = "inference";
        <non-logical-data {
          @"name" = "clausify";
          <non-logical-data {
            for-each [justification] {
              <non-logical-data {
                @"name" = `@parents`;
              }
            }
          }
        }
      }
    }
    <useful-info {
      <non-logical-data {
        for-each [literal] {
          for-each [text()] {
            $s = `string (.)`;
            @text = `normalize-space ($s)`;
          }
        }
      }
    }
  }
}

tpl emit-parents (#parents-string) {
  if [$parents-string = ""] {
    // we're done
  } else {
    $first-parent = `substring-before ($parents-string, " ")`;
    $tail = `substring-after ($parents-string, " ")`;
    <non-logical-data {
      @"name" = $first-parent;
    }
    emit-parents (#parents-string = $tail);
  }
}

tpl [clause[not(@type = "clausify") and not(@type = "assumption")]] {
  <formula {
    @"name" = `@id`;
    @syntax = "formula";
    @status = "plain";
    if [literals[2]] {
      <disjunction {
        emit-literals (#literals = `literal`);
      }
    } else {
      for-each [literal] {
        for-each [text()] {
          $s = `string (.)`;
          parse-ladr-formula (#string = `normalize-space ($s)`);
        }
      }
    }
    <source {
      <non-logical-data {
        @"name" = "inference";
        <non-logical-data {
          for-each [justification] {
            for-each [j1] {
              @"name" = `@rule`;
              emit-parents (#parent-string = `@parents`);
            }
          }
        }
      }
    }
    <useful-info {
      <non-logical-data {
        for-each [literal] {
          for-each [text()] {
            $s = `string (.)`;
            @text = `normalize-space ($s)`;
          }
        }
      }
    }
  }
}